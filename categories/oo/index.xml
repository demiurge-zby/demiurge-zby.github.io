<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>OO on Demiurge</title>
        <link>https://demiurge-zby.github.io/categories/oo/</link>
        <description>Recent content in OO on Demiurge</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>Demiurge</copyright>
        <lastBuildDate>Mon, 09 Jun 2025 21:15:30 +0800</lastBuildDate><atom:link href="https://demiurge-zby.github.io/categories/oo/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>北航OO U4 UML正向建模与图书管理系统</title>
        <link>https://demiurge-zby.github.io/p/%E5%8C%97%E8%88%AAoo-u4-uml%E6%AD%A3%E5%90%91%E5%BB%BA%E6%A8%A1%E4%B8%8E%E5%9B%BE%E4%B9%A6%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</link>
        <pubDate>Mon, 09 Jun 2025 21:15:30 +0800</pubDate>
        
        <guid>https://demiurge-zby.github.io/p/%E5%8C%97%E8%88%AAoo-u4-uml%E6%AD%A3%E5%90%91%E5%BB%BA%E6%A8%A1%E4%B8%8E%E5%9B%BE%E4%B9%A6%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</guid>
        <description>&lt;img src="https://demiurge-zby.github.io/p/%E5%8C%97%E8%88%AAoo-u4-uml%E6%AD%A3%E5%90%91%E5%BB%BA%E6%A8%A1%E4%B8%8E%E5%9B%BE%E4%B9%A6%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/123.png" alt="Featured image of post 北航OO U4 UML正向建模与图书管理系统" /&gt;&lt;h2 id=&#34;关于正向建模&#34;&gt;关于正向建模
&lt;/h2&gt;&lt;p&gt;正向建模是基于需求分析，创建一系列模型来表达系统的静态结构、动态行为和交互逻辑的过程。这些模型以可视化方式帮助我们理解系统设计，并为后续开发与实现提供指导。其核心是借助模型逐步细化的过程，从高层概念推进到低层实现，确保设计与需求一致。&lt;/p&gt;
&lt;p&gt;因此正向建模的核心并不在于画图，而&lt;strong&gt;需求分析&lt;/strong&gt;才是正向建模的重要基础。&lt;/p&gt;
&lt;h3 id=&#34;需求分析&#34;&gt;需求分析
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;需求分析是将用户的需求转化为清晰、可验证的系统要求的活动。它涉及收集、分析、记录和验证需求，旨在理解系统的目标、功能、约束和性能要求。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;简单点来说，需求分析要从任务里读出：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;有哪些种类的对象？&lt;/li&gt;
&lt;li&gt;对象需要管理什么属性？&lt;/li&gt;
&lt;li&gt;需要实现什么功能？&lt;/li&gt;
&lt;li&gt;功能需要哪些对象进行协作？&lt;/li&gt;
&lt;li&gt;&amp;hellip;&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本次作业中，原则上只有书，人和图书馆。但是图书馆的功能太过复杂，我们根据&lt;strong&gt;单一职责原则&lt;/strong&gt;，将图书馆拆成了一个管理类（Library）和四个功能类（主要负责取书的bs，主要负责预约的ao，主要负责归还的bro和主要负责阅读的rr）。&lt;/p&gt;
&lt;h3 id=&#34;图的设计&#34;&gt;图的设计
&lt;/h3&gt;&lt;p&gt;不同种类的图是回应需求分析结果的不同手段。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;类图：定义系统静态结构&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;类图定义了&lt;strong&gt;最基础的原材料&lt;/strong&gt;。它的核心功能就是将需求中的实体抽象为类，并通过关联、聚合、组合、继承等关系，描述实体之间的联系。通过这样的实现，系统的静态结构便一目了然。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;状态图：描述对象动态行为&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;如果说类图是原料是基础，那&lt;strong&gt;状态图就应该是效果的呈现&lt;/strong&gt;。无论属性如何影响方法，方法又如何影响属性，最终我们要实现的是功能。通过状态图描述系统中某个对象在不同状态之间的转换以及触发转换的事件，我们可以得知对象的动态行为具体可以产生什么影响。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;顺序图：描述对象交互时序&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;顺序图在正向建模中帮助团队&lt;strong&gt;明确系统如何实现功能&lt;/strong&gt;，它通过消息传递来描述类与类之间的协作，并解释了如何通过不同对象的协作来实现功能。&lt;/p&gt;
&lt;h2 id=&#34;关于架构&#34;&gt;关于架构
&lt;/h2&gt;&lt;p&gt;本次作业的架构设计其实花了我很大的功夫。在hw13的时候，我浏览学长的代码，但又不愿深入阅读过度模仿；我阅读学长的博客，也总觉得不能心领神会。最后无奈先写了一份需求分析出来，将散落在各处的要求集中起来，选定合适的数据结构与方法，才得到了类图的雏形。&lt;/p&gt;
&lt;p&gt;很遗憾没能早点接触状态图与顺序图，类图是类的构造蓝图，那这两张图可以说是具体方法实现的蓝图。&lt;/p&gt;
&lt;p&gt;具体架构的内容见下图。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://demiurge-zby.github.io/p/%E5%8C%97%E8%88%AAoo-u4-uml%E6%AD%A3%E5%90%91%E5%BB%BA%E6%A8%A1%E4%B8%8E%E5%9B%BE%E4%B9%A6%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/image.png&#34;
	width=&#34;1519&#34;
	height=&#34;826&#34;
	srcset=&#34;https://demiurge-zby.github.io/p/%E5%8C%97%E8%88%AAoo-u4-uml%E6%AD%A3%E5%90%91%E5%BB%BA%E6%A8%A1%E4%B8%8E%E5%9B%BE%E4%B9%A6%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/image_hu11203860776147148248.png 480w, https://demiurge-zby.github.io/p/%E5%8C%97%E8%88%AAoo-u4-uml%E6%AD%A3%E5%90%91%E5%BB%BA%E6%A8%A1%E4%B8%8E%E5%9B%BE%E4%B9%A6%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/image_hu15849978408561524164.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;类图&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;183&#34;
		data-flex-basis=&#34;441px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://demiurge-zby.github.io/p/%E5%8C%97%E8%88%AAoo-u4-uml%E6%AD%A3%E5%90%91%E5%BB%BA%E6%A8%A1%E4%B8%8E%E5%9B%BE%E4%B9%A6%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/image-1.png&#34;
	width=&#34;1412&#34;
	height=&#34;738&#34;
	srcset=&#34;https://demiurge-zby.github.io/p/%E5%8C%97%E8%88%AAoo-u4-uml%E6%AD%A3%E5%90%91%E5%BB%BA%E6%A8%A1%E4%B8%8E%E5%9B%BE%E4%B9%A6%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/image-1_hu3052618928839767250.png 480w, https://demiurge-zby.github.io/p/%E5%8C%97%E8%88%AAoo-u4-uml%E6%AD%A3%E5%90%91%E5%BB%BA%E6%A8%A1%E4%B8%8E%E5%9B%BE%E4%B9%A6%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/image-1_hu6738793309917177957.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;状态图&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;191&#34;
		data-flex-basis=&#34;459px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;关于大模型&#34;&gt;关于大模型
&lt;/h2&gt;&lt;p&gt;我本来是抵触使用大模型的。倒也不是因为追求所谓的“独立自主”，只是觉得让一个尚不靠谱的大模型帮我完成作业，心里面觉着没底，出了问题还要自己琢磨，去重新理解它可能并不合理的架构。但倘若是自己写的代码，无论如何，你理解每个属性每个方法的功用，你很熟悉你的静态设计。&lt;/p&gt;
&lt;p&gt;那么大模型辅助正向建模这件事，便深刻地影响了我。我只需要把指导书发给大模型，大模型就能直接给出它的实现思路。这个思路不同于代码，它易读易懂，我也可以随时进行指正或者改善，最后形成我对这个任务的处理方法设计。不仅如此，我借此将架构与实现相分离，实现了将程序分为数据结构与算法的过程。&lt;/p&gt;
&lt;p&gt;不过在如何使用大模型上，“直接把指导书扔给大模型”属于缺乏技术力的懒人行为。实验课上传授的ROSES与COT能够不错地规范自己的输入要求与大模型的思维方式。目前我也习惯开局来一句：&lt;em&gt;假如你是xxx专家&lt;/em&gt;，让大模型定位好它要解决的问题领域。Steps与Example在具体使用中常常无暇书写，但如果真的需要大模型给出相对符合预期的答案，我们也可以借助这种描述方式来辅助实现。&lt;/p&gt;
&lt;h2 id=&#34;学期总结&#34;&gt;学期总结
&lt;/h2&gt;&lt;p&gt;当一个学期有了OO，它便已经被无情地切割为了16份。任务不断推进，我们终于走进hw16，这个学期也已然走向了尾声。本学期的面向对象课程通过风格迥异的四个单元，深刻阐述了如何认识类，如何设计类，如何书写类。&lt;/p&gt;
&lt;h3 id=&#34;架构设计&#34;&gt;架构设计
&lt;/h3&gt;&lt;p&gt;四个单元以来，我从只会写一个个简单的方法，逐渐有能力从任务中提取信息，从零开始建类，并实现最终的作业要求。犹记得OOhw1的时候，刚刚迈入新学期，迎接我的便是深不可测的汪洋。我当时尚且没有什么面向对象的思想，对类也没有认知，喊着“递归下降”就冲过去了，结果发现什么也写不出来。最终通过层次化的架构设计，借助lexer将读到的内容转化为token对象，并通过parser实现Expr到Term再到Factor的递归下降，将表达式拆成最小单位的组合。拆解后的表达式也同样借助递归下降计算化简结果。&lt;/p&gt;
&lt;p&gt;U2的架构设计则以生产者消费者模型为核心，大多数类都只是为了多线程的信息读取而实现。实际上具体的难点反而在于电梯类本身的策略，架构设计基本上与实验课的代码无异。U3可以说没有进行架构设计。U4作为引领同学们实现正向建模的一章，本身的架构设计却也意外的清晰。Library类管理书和人，图书馆的地点又分为四个类bs,ao,bro,rr。&lt;/p&gt;
&lt;p&gt;另外，不得不提到的是，&lt;strong&gt;实验课&lt;/strong&gt;在代码架构方面对我的启发是极大的。当我面对一个新的问题和一个空的仓库，我能做的往往只是一个MainClass&lt;del&gt;和一段空想&lt;/del&gt;。但是通过在实验课上阅读代码架构，填写空缺，我能够更快地理解作业的难点和重点究竟在哪里，然后花很长时间复刻架构，并叹息之前浪费的时间之多。我个人认为，写不出来任何东西的原因就是&lt;strong&gt;经验过于匮乏&lt;/strong&gt;！对于解决一个问题没有基本的架构设计认知，每学会一个就只知道&lt;strong&gt;这样做“行”&lt;/strong&gt;，但没有想过为什么这么做，&lt;strong&gt;如何想到&lt;/strong&gt;这么做。因此OOU4的正向建模从&lt;strong&gt;需求分析&lt;/strong&gt;出发，并以一个简单的例子入手，引领我从零开始，实现了完全自主的代码架构设计。&lt;/p&gt;
&lt;h3 id=&#34;测试思维&#34;&gt;测试思维
&lt;/h3&gt;&lt;p&gt;本学期另外一个大的个人突破，便是第一次尝试搭建了评测机。评测机是一个黑盒测试，根据狂轰滥炸式的输入来看代码能不能始终输出正确的结果。&lt;/p&gt;
&lt;p&gt;在OOU3前，我仍然认为数据量越大，次数越多就越容易找到问题。在学完之后，我虽然不能直白地否认这个说法，但我不得不佩服白箱测试的精准与强悍。JUnit与JML规格强强联合，为代码写出覆盖所有情况的寥寥几个测试，便能直接实现方法的完整评测。此外，以更小的单位进行测试也更容易定位问题所在。&lt;/p&gt;
&lt;p&gt;但影响我对测试认知的，不仅仅是OOU3。&lt;/p&gt;
&lt;p&gt;OOU1中，我的评测机借助sympy库，实现了表达式值的测试。然而难点在于格式错误问题————这个地方到底可不可以只有一层括号？这样的错误该如何检查？我发现测试的内容需要是足够全面的。       &lt;br&gt;
OOU2中，“抽奖修复bug”大法广为流传。线程间锁的抢夺已然使结果变化多端，随机分配策略更是让bug复现的概率锐减。测试要足够多，压力要足够大，测试才可能变得更有效。   &lt;br&gt;
OOU3中，我成为了测试的书写者。我发现我想不到，是什么样的代码能够做到，执行一次方法是正确的，连续执行两遍就会出错？是没有满足pure方法？还是说他的结果其实是随机数出来的，只是第一遍运气好？我意识到，测试要贯彻无情的态度。不思考对方怎么实现，我只关注后置条件与副作用范围。  &lt;br&gt;
OOU4中，我首次见识到交互式测试。我只会&lt;code&gt;data.exe &amp;gt; stdin.txt&lt;/code&gt;，&lt;code&gt;java -jar xxx.jar &amp;lt; stdin.txt &amp;gt; out.txt&lt;/code&gt;，&lt;code&gt;python check.py&lt;/code&gt;，想不到如何实时根据out的内容去改变stdin。可惜第四单元事务繁多，又没有互测要求，尚没有了解评测机的具体实现方法。&lt;/p&gt;
&lt;h3 id=&#34;其他收获&#34;&gt;其他收获
&lt;/h3&gt;&lt;p&gt;要说还有什么其他收获，那不得不提到大模型了！我从未想过，会有这样一门课，支持我用大模型去完成本该由我完成的任务，还详尽地教导我如何更好地使用大模型。将大模型变为一个趁手高效的工具，而不是一个自说自话胡言乱语的对话框，这是大学期间需要培养的重要技能。&lt;/p&gt;
&lt;p&gt;OO带来的独特生活体验也是不得不品的一环。倒也没有天天熬夜debug，但是每个星期都在围着OO转还真是一点不假。&lt;/p&gt;
&lt;p&gt;最后感谢课程组的辛苦付出！祝愿OO课程不断进步！&lt;/p&gt;
</description>
        </item>
        <item>
        <title>北航OO U3 JML与社交网络</title>
        <link>https://demiurge-zby.github.io/p/%E5%8C%97%E8%88%AAoo-u3-jml%E4%B8%8E%E7%A4%BE%E4%BA%A4%E7%BD%91%E7%BB%9C/</link>
        <pubDate>Fri, 16 May 2025 12:15:30 +0800</pubDate>
        
        <guid>https://demiurge-zby.github.io/p/%E5%8C%97%E8%88%AAoo-u3-jml%E4%B8%8E%E7%A4%BE%E4%BA%A4%E7%BD%91%E7%BB%9C/</guid>
        <description>&lt;img src="https://demiurge-zby.github.io/p/%E5%8C%97%E8%88%AAoo-u3-jml%E4%B8%8E%E7%A4%BE%E4%BA%A4%E7%BD%91%E7%BB%9C/123.png" alt="Featured image of post 北航OO U3 JML与社交网络" /&gt;&lt;h2 id=&#34;关于架构&#34;&gt;关于架构
&lt;/h2&gt;&lt;p&gt;本单元的核心任务是根据接口提供的需求，写出其具体实现。&lt;/p&gt;
&lt;p&gt;三次迭代的递进关系并不很强，更像是不同模块的各自实现。&lt;/p&gt;
&lt;p&gt;第一次迭代明确了Network作为中枢，并引入了核心对象person与tag&lt;/p&gt;
&lt;p&gt;第二次迭代引入account模块与article系统&lt;/p&gt;
&lt;p&gt;第三次迭代则引入了综合性很强的message系统，其中涉及到了tag与article的相关内容&lt;/p&gt;
&lt;p&gt;由于接口的需求很明确，整个图模型的架构相对确定，我们的核心内容主要只是完成方法与辅助方法。&lt;/p&gt;
&lt;h2 id=&#34;关于测试&#34;&gt;关于测试
&lt;/h2&gt;&lt;p&gt;本单元对测试的要求较高，中测的核心问题主要出现在Junit测试中。&lt;/p&gt;
&lt;p&gt;但为了通过中测所进行的测试，往往是最简单的单元测试。  &lt;br&gt;
因此哪怕已经经历了一整个单元，我对许多其他测试的具体内容仍然是完全陌生的。&lt;/p&gt;
&lt;h3 id=&#34;单元测试&#34;&gt;单元测试
&lt;/h3&gt;&lt;p&gt;针对软件中的&lt;strong&gt;最小可测试单元&lt;/strong&gt;进行的测试，确保每个单元能正常工作。&lt;/p&gt;
&lt;p&gt;特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;粒度&lt;/strong&gt;最小：聚焦单个单元，测试范围独立。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;白盒测试&lt;/strong&gt;为主：需了解代码内部结构，设计测试用例覆盖不同分支、边界条件等。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;功能测试&#34;&gt;功能测试
&lt;/h3&gt;&lt;p&gt;基于软件需求规格说明书，验证功能是否符合用户预期，&lt;strong&gt;不关注内部实现细节&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;黑盒测试&lt;/strong&gt;为主：从用户视角出发，仅关注输入与输出。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;粒度&lt;/strong&gt;较大：对整体进行测试，系统性强，只能鉴定问题的存在性，而很难做好定位&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;集成测试&#34;&gt;集成测试
&lt;/h3&gt;&lt;p&gt;将&lt;strong&gt;多个单元或模块&lt;/strong&gt;组合起来，测试它们之间的&lt;strong&gt;接口和交互&lt;/strong&gt;是否正常。&lt;/p&gt;
&lt;p&gt;特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;关注接口与协作：测试重点往往是模块间的依赖关系和数据流动。&lt;/li&gt;
&lt;li&gt;渐增式测试：一般采用自顶向下、自底向上或混合方式逐步集成模块，便于定位模块间交互出现异常的位置。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;压力测试&#34;&gt;压力测试
&lt;/h3&gt;&lt;p&gt;通过模拟高负载、高并发场景，测试系统在&lt;strong&gt;极限条件&lt;/strong&gt;下的性能、稳定性和容错能力。&lt;/p&gt;
&lt;p&gt;特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;破坏性测试：常常故意施加超过正常范围的压力。&lt;/li&gt;
&lt;li&gt;关注性能指标：如CPU time，Running time，内存等指标。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;回归测试&#34;&gt;回归测试
&lt;/h3&gt;&lt;p&gt;在发生如代码修改、功能新增等变化后，&lt;strong&gt;重新测试已验证过的功能&lt;/strong&gt;，确保变更未引入新缺陷或破坏原有功能。&lt;/p&gt;
&lt;p&gt;特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;重复性测试：可重复执行历史测试用例来检验是否破坏原有功能。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;关于大模型&#34;&gt;关于大模型
&lt;/h2&gt;&lt;p&gt;本次作业我使用大模型的地方并不是很多，但第六次上机实验给了我很大的启发。&lt;/p&gt;
&lt;p&gt;上机实验中的三个阶段分别是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;直接生成&lt;/li&gt;
&lt;li&gt;给出相关知识与解释&lt;/li&gt;
&lt;li&gt;给出具体的示例&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在根据这三个步骤实现之后，大模型的表现确实有很大进步。首先给出任务目标，然后再明确期望格式和核心目的，采用的是采用&lt;code&gt;目标层&lt;/code&gt;→&lt;code&gt;约束层&lt;/code&gt;→&lt;code&gt;示例层&lt;/code&gt;的三层结构，减少模型理解偏差。&lt;/p&gt;
&lt;p&gt;在实际使用过程中，我还有一些其他的使用体验，例如&lt;strong&gt;动态反馈&lt;/strong&gt;。其实这个是我使用大模型时的常态，究其根本原因，可能便是&lt;strong&gt;对自己要解决什么问题都不清楚&lt;/strong&gt;。于是在大模型的输出中进一步寻找问题，寻求解释，从而一层一层地解决问题。虽然最后一般也有不错的结果，但是还是相对耗时。   &lt;br&gt;
可能由自己直面问题，将核心目的拆解出来再借助大模型，会有更好的效果。&lt;/p&gt;
&lt;h2 id=&#34;关于性能&#34;&gt;关于性能
&lt;/h2&gt;&lt;p&gt;规格与实现分离。规格是&lt;strong&gt;题干&lt;/strong&gt;，实现是&lt;strong&gt;题解&lt;/strong&gt;。&lt;strong&gt;题干限定了你的结果，但是做题的过程由你的实现所决定&lt;/strong&gt;。一道选择题可能大家都能写出正确答案，但是不同人的思考模式与做题技巧是不同的。如果你的实现能够满足规格的所有要求，那么这个实现便是正确的，但未必是优秀的。&lt;/p&gt;
&lt;p&gt;在本次作业中，优秀的评断主要体现在TIME。因此我们一般要考虑构建一些数据结构，试图以空间换时间。&lt;/p&gt;
&lt;h3 id=&#34;并查集&#34;&gt;并查集
&lt;/h3&gt;&lt;p&gt;在query_circle中，我采用了并查集的方法，结合了&lt;strong&gt;路径压缩与按秩合并&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;并查集的核心思想就是为一个&lt;strong&gt;连通分支&lt;/strong&gt;选出一个&lt;strong&gt;代表结点&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;路径压缩：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;find&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;parent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;parent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;put&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;find&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;parent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)));&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 压缩&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;parent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;按秩合并：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;union&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;root1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;find&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;root2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;find&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;root1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;root2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 按秩合并&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rank&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;root1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rank&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;root2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;parent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;put&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;root1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;root2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rank&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;root1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rank&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;root2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;parent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;put&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;root2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;root1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;parent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;put&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;root2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;root1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rank&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;put&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;root1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rank&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;root1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;但是并查集&lt;strong&gt;便于增添，不便于删改&lt;/strong&gt;。当某段关系被解除，路径压缩后的并查集不能再判断出这个人是否会脱离该连通分支。因此此时须考虑重新构建并查集。&lt;/p&gt;
&lt;h3 id=&#34;增量化设计&#34;&gt;增量化设计
&lt;/h3&gt;&lt;p&gt;这一优化对我的影响相对较深，至少让我首次意识到size的维护居然能避免一次大遍历。&lt;/p&gt;
&lt;p&gt;增量化设计的核心思想就是&lt;strong&gt;在变化时对数值做维护&lt;/strong&gt;，在查询时直接得到当前结果。或者说这是一种&lt;strong&gt;在线算法&lt;/strong&gt;，求值不从头开始，而是由上一状态+变化过程而得来。&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;query_tag_value_sum&lt;/code&gt;，&lt;code&gt;query_triple_sum&lt;/code&gt;和&lt;code&gt;query_tag_age_var&lt;/code&gt;中，我主要使用了这一思想。具体实现上的易错点就不必在这里赘述了。&lt;/p&gt;
&lt;h3 id=&#34;缓存与脏位&#34;&gt;缓存与脏位
&lt;/h3&gt;&lt;p&gt;缓存类似于增量化设计，但&lt;strong&gt;缓存的内容不一定是正确的&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;某些值虽然我知道在某个过程中发生了改变，但是&lt;strong&gt;维护起来相对复杂&lt;/strong&gt;，甚至效率堪比重新计算。倘若在每次改变的时候都进行维护，虽然精准，但会造成效率的损失。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;例如&lt;em&gt;均值是方便增量化维护的，而方差就不方便&lt;/em&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;因此可以选择设置&lt;code&gt;dirty&lt;/code&gt;位，仅在需要查询时再进行缓存数据的更新。&lt;/p&gt;
&lt;p&gt;我在&lt;code&gt;query_best_acquaintance&lt;/code&gt;，&lt;code&gt;query_best_contributor&lt;/code&gt;，&lt;code&gt;query_tag_age_var&lt;/code&gt;以及&lt;code&gt;并查集的重建&lt;/code&gt;中主要使用了这一思想。&lt;/p&gt;
&lt;h3 id=&#34;mycontainer&#34;&gt;MyContainer
&lt;/h3&gt;&lt;p&gt;主要解决在有序列表中按值删除对象中的遍历问题。&lt;/p&gt;
&lt;p&gt;Linkedlist固然好，但是它只是能很快的删除某个&lt;strong&gt;结点&lt;/strong&gt;，&lt;strong&gt;内部不存在值与结点的映射&lt;/strong&gt;。因此只需仿照Linkedlist构建一个类，但增加一个属性HashMap用来由值索引到结点。（因为一个值可能对应多个节点，所以可以考虑&lt;code&gt;HashMap&amp;lt;Integer,HashSet&amp;lt;...&amp;gt;&amp;gt;&lt;/code&gt;）&lt;/p&gt;
&lt;p&gt;在hw10强测中因未采用这一数据结构而发生了CTLE。&lt;/p&gt;
&lt;h2 id=&#34;关于junit&#34;&gt;关于Junit
&lt;/h2&gt;&lt;p&gt;我在本单元的研讨课上较多地讲述了如何由规格构建测试的方法论。在此将主要内容进行重述。&lt;/p&gt;
&lt;h3 id=&#34;自动化测试基本方法&#34;&gt;自动化测试基本方法
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;@RunWith(Parameterized.class)&lt;/strong&gt;   &lt;br&gt;
切换到 Parameterized 运行器，让测试类依据多组参数生成多个Test对象，多次执行同一个测试方法，避免了手动编写大量重复的测试代码。       &lt;br&gt;
&lt;strong&gt;@Parameterized.Parameters&lt;/strong&gt;&lt;br&gt;
定义一个返回测试数据集合的静态方法，返回的集合包含testNum个小集合，每个小集合包含生成Test对象的参数。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;多次@Test&lt;/strong&gt;  &lt;br&gt;
手动构建测试样例，覆盖能够触发 JML 规格中所有可能行为的输入数据和对象状态。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;基于规格的数据生成&#34;&gt;基于规格的数据生成
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;数据限制
&lt;ul&gt;
&lt;li&gt;requires明确了方法的&lt;strong&gt;某种输入约束&lt;/strong&gt;（如参数范围、对象状态）。&lt;/li&gt;
&lt;li&gt;invariant是类级别的约束，&lt;strong&gt;必须确保&lt;/strong&gt;测试数据满足这些基本约束。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;多场景构造
&lt;ul&gt;
&lt;li&gt;正常场景：构造满足前置条件的&lt;strong&gt;典型输入&lt;/strong&gt;，触发 JML &lt;strong&gt;ensures&lt;/strong&gt; 条款中的正常行为。&lt;/li&gt;
&lt;li&gt;边界场景：构造边缘输入，如&lt;strong&gt;空集合&lt;/strong&gt;、&lt;strong&gt;边界值&lt;/strong&gt;、&lt;strong&gt;单一元素&lt;/strong&gt;等。&lt;/li&gt;
&lt;li&gt;异常场景：构造违反前置条件的输入，触发 JML &lt;strong&gt;signals&lt;/strong&gt; 条款中的异常。&lt;/li&gt;
&lt;li&gt;复杂场景：构造具有&lt;strong&gt;复杂关系或大规模数据&lt;/strong&gt;的场景，测试方法在高负载下的正确性。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;基于规格的断言生成&#34;&gt;基于规格的断言生成
&lt;/h3&gt;&lt;p&gt;invariant  -&amp;gt; 基本数据要求，可断言&lt;strong&gt;执行方法后是否满足&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;constraint -&amp;gt; 数据变化要求，可&lt;strong&gt;保存old信息&lt;/strong&gt;进行断言&lt;/p&gt;
&lt;p&gt;assignable -&amp;gt; 对没被assign的变量做&lt;strong&gt;pure断言&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;signal -&amp;gt; &lt;strong&gt;异常捕捉&lt;/strong&gt;方法或&lt;strong&gt;assertThrow&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;ensures -&amp;gt; 方法核心效果的断言&lt;/p&gt;
&lt;p&gt;pure -&amp;gt; &lt;strong&gt;保存old信息&lt;/strong&gt;（或备份信息）进行断言&lt;/p&gt;
&lt;h2 id=&#34;关于心得&#34;&gt;关于心得
&lt;/h2&gt;&lt;p&gt;本单元整体给我的感觉是比较舒适的。除了hw10的实验预习题中那颗树的JML让我感到深刻畏惧，其他的JML读起来都让人很明白自己需要做什么。哪怕是看起来最复杂的sendMessage，很多行JML也只是对应一个小方法的调用。而有些言简意赅的JML，背后却需要十分复杂的实现。&lt;/p&gt;
&lt;p&gt;有了颜色标注之后，阅读JML的枯燥与混乱已经基本消失殆尽。&lt;/p&gt;
&lt;p&gt;但是JML的书写对我来说仍然是极为困难的课题，哪怕强如助教也会在官方包出现小的失误。但JML作为根本要旨，要保证绝对的严格与严谨，书写JML需要有对方法极高的概括力，还有对细节的全面把握。不过学完了这个单元，我们终于可以说自己走出了了解JML的第一步。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>北航OO U2 多线程与电梯</title>
        <link>https://demiurge-zby.github.io/p/%E5%8C%97%E8%88%AAoo-u2-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E7%94%B5%E6%A2%AF/</link>
        <pubDate>Thu, 17 Apr 2025 12:15:30 +0800</pubDate>
        
        <guid>https://demiurge-zby.github.io/p/%E5%8C%97%E8%88%AAoo-u2-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E7%94%B5%E6%A2%AF/</guid>
        <description>&lt;img src="https://demiurge-zby.github.io/p/%E5%8C%97%E8%88%AAoo-u2-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E7%94%B5%E6%A2%AF/123.png" alt="Featured image of post 北航OO U2 多线程与电梯" /&gt;&lt;h2 id=&#34;迭代过程综述&#34;&gt;迭代过程综述
&lt;/h2&gt;&lt;h3 id=&#34;请求的迭代&#34;&gt;请求的迭代
&lt;/h3&gt;&lt;p&gt;第一次作业：PersonRequest            &lt;br&gt;
第二次作业：ScheRequest           &lt;br&gt;
第三次作业：UpdateRequest&lt;/p&gt;
&lt;h3 id=&#34;分配的迭代&#34;&gt;分配的迭代
&lt;/h3&gt;&lt;p&gt;第一次作业：指定分配 &lt;br&gt;
第二次作业：手动分配、SCHE静默       &lt;br&gt;
第三次作业：Update静默、高低楼层分配&lt;/p&gt;
&lt;h3 id=&#34;运行的迭代&#34;&gt;运行的迭代
&lt;/h3&gt;&lt;p&gt;第一次作业：LOOK   &lt;br&gt;
第二次作业：专属SCHE运行      &lt;br&gt;
第三次作业：专属UPDATE运行、重写MOVE方法&lt;/p&gt;
&lt;h3 id=&#34;输出的迭代&#34;&gt;输出的迭代
&lt;/h3&gt;&lt;p&gt;第一次作业：ARRIVE/OPEN/OUT/IN/CLOSE       &lt;br&gt;
第二次作业：SCHE、RECEIVE以及OUT-F/S   &lt;br&gt;
第三次作业：UPDATE&lt;/p&gt;
&lt;h2 id=&#34;迭代分析&#34;&gt;迭代分析
&lt;/h2&gt;&lt;h3 id=&#34;作业核心内容&#34;&gt;作业核心内容
&lt;/h3&gt;&lt;p&gt;hw5核心实现：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;生产者消费者模型&lt;/li&gt;
&lt;li&gt;LOOK算法&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;hw6核心实现：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;调度器&lt;/li&gt;
&lt;li&gt;SCHE策略&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;hw7核心实现：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;UPDATE策略&lt;/li&gt;
&lt;li&gt;强制中转&lt;/li&gt;
&lt;li&gt;双轿厢的同步与互斥&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;uml类图&#34;&gt;UML类图
&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://demiurge-zby.github.io/p/%E5%8C%97%E8%88%AAoo-u2-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E7%94%B5%E6%A2%AF/image-1.png&#34;
	width=&#34;1241&#34;
	height=&#34;800&#34;
	srcset=&#34;https://demiurge-zby.github.io/p/%E5%8C%97%E8%88%AAoo-u2-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E7%94%B5%E6%A2%AF/image-1_hu2800710375844316694.png 480w, https://demiurge-zby.github.io/p/%E5%8C%97%E8%88%AAoo-u2-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E7%94%B5%E6%A2%AF/image-1_hu16159373750419713481.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34; &#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;155&#34;
		data-flex-basis=&#34;372px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;红色为hw5，绿色为hw6，蓝色为hw7&lt;/p&gt;
&lt;p&gt;其中对于&lt;code&gt;RequestCoordinator&lt;/code&gt;，每个电梯都有一把这样的锁，当电梯没有request时，就会调用这个里的条件变量的wait,也即封装好的&lt;code&gt;waitForRequest()&lt;/code&gt;函数。被唤醒则通过分发线程分给各个Queue后触发唤醒。&lt;/p&gt;
&lt;h3 id=&#34;sequence&#34;&gt;sequence
&lt;/h3&gt;&lt;p&gt;电梯线程的run方法：  &lt;br&gt;
&lt;img src=&#34;https://demiurge-zby.github.io/p/%E5%8C%97%E8%88%AAoo-u2-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E7%94%B5%E6%A2%AF/ElevatorThread_run.png&#34;
	width=&#34;679&#34;
	height=&#34;981&#34;
	srcset=&#34;https://demiurge-zby.github.io/p/%E5%8C%97%E8%88%AAoo-u2-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E7%94%B5%E6%A2%AF/ElevatorThread_run_hu7559287381418978283.png 480w, https://demiurge-zby.github.io/p/%E5%8C%97%E8%88%AAoo-u2-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E7%94%B5%E6%A2%AF/ElevatorThread_run_hu4541188798760296372.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34; &#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;69&#34;
		data-flex-basis=&#34;166px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;主线程(?)的main方法：   &lt;br&gt;
&lt;img src=&#34;https://demiurge-zby.github.io/p/%E5%8C%97%E8%88%AAoo-u2-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E7%94%B5%E6%A2%AF/MainClass_main.png&#34;
	width=&#34;769&#34;
	height=&#34;415&#34;
	srcset=&#34;https://demiurge-zby.github.io/p/%E5%8C%97%E8%88%AAoo-u2-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E7%94%B5%E6%A2%AF/MainClass_main_hu12254519656876251287.png 480w, https://demiurge-zby.github.io/p/%E5%8C%97%E8%88%AAoo-u2-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E7%94%B5%E6%A2%AF/MainClass_main_hu5792283028725187188.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34; &#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;185&#34;
		data-flex-basis=&#34;444px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;稳定与易变&#34;&gt;稳定与易变
&lt;/h3&gt;&lt;p&gt;稳定：   &lt;br&gt;
生产者消费者模型的整体框架与类的构建     &lt;br&gt;
strategy中的LOOK算法     &lt;br&gt;
poll、open、setEnd等基本函数的实现&lt;/p&gt;
&lt;p&gt;易变：   &lt;br&gt;
具体的运行方法，如doubleGo()、sche()、update()   &lt;br&gt;
电梯的属性要不断增添以适应需求&lt;/p&gt;
&lt;p&gt;整体感受下来，   &lt;br&gt;
hw5是初识多线程、生产者消费者模型与LOOK算法，主要是接受&lt;strong&gt;多线程的并发感&lt;/strong&gt;，掌握一对一的通信方法（End的实现）&lt;/p&gt;
&lt;p&gt;hw6开始出现&lt;strong&gt;单锁双开&lt;/strong&gt;：不再是一对一的通信，scheRequest与personRequest都能让正在wait的电梯苏醒。&lt;/p&gt;
&lt;p&gt;hw7则出现了更加复杂的线程通信。主要体现在&lt;strong&gt;同类对象同一方法&lt;/strong&gt;过程中的互相通信。如果不做好同步就擅自拿锁，很容易触发死锁。&lt;/p&gt;
&lt;h2 id=&#34;同步块的设置和锁的选择&#34;&gt;同步块的设置和锁的选择
&lt;/h2&gt;&lt;p&gt;在第一次作业中，我基本掌握了&lt;strong&gt;synchronize块&lt;/strong&gt;的用法，配套使用wait与notify。到了第二次作业，我突然决定尝试使用&lt;strong&gt;读写锁&lt;/strong&gt;。在自学了条件变量及其await和signal后，我由于不熟悉、不确定而深受其扰，也常常感到后悔为何要自作主张，但逐渐地，也终于感受到了读写锁的清晰与直白。&lt;/p&gt;
&lt;p&gt;在两者的关系上：     &lt;br&gt;
同步块其实是&lt;strong&gt;隐式使用&lt;/strong&gt;了对象的内置锁   &lt;br&gt;
而显式锁可以&lt;strong&gt;跨方法&lt;/strong&gt;使用，可以设置公平性，还更加清晰易读。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;条件变量&lt;/strong&gt;的引入与传递也极大便利了线程之间的通信。&lt;/p&gt;
&lt;h2 id=&#34;调度器设计&#34;&gt;调度器设计
&lt;/h2&gt;&lt;p&gt;虽然我采用了随机分配的策略，但是在正确性上要考虑的问题依旧存在。&lt;/p&gt;
&lt;h3 id=&#34;被scheupdate时不能receive&#34;&gt;被SCHE/UPDATE时不能RECEIVE
&lt;/h3&gt;&lt;p&gt;在调度器中当然需要拿到电梯的相关信息，六部电梯Elevators是调度器的属性之一。&lt;/p&gt;
&lt;p&gt;但是在判断到isSche()后，我并不采用重新选电梯的方法，而是用wait方法等待这个电梯SCHE结束，再把那个任务分配给电梯。&lt;/p&gt;
&lt;p&gt;这样写自然是有缺陷的，你的调度器线程居然为了一个随机分配的结果而&lt;strong&gt;等待&lt;/strong&gt;？   &lt;br&gt;
但是正相对地，他保证了分配结果一定是完全随机的。（hw6 mid5的教训）   &lt;br&gt;
此外，随机性也导致等待这一现象的发生也是随机的，并不容易导致调度器被恶意阻塞。&lt;/p&gt;
&lt;h3 id=&#34;不能receive我接不到的人&#34;&gt;不能RECEIVE我接不到的人
&lt;/h3&gt;&lt;p&gt;一旦你被升级，且RECEIVE了你接管范围外的人：  &lt;br&gt;
在接到这个人之前，你将没有机会把RECEIVE转让。    &lt;br&gt;
而你也并不能接到这个人。&lt;/p&gt;
&lt;p&gt;在这里，我则强制让它的伙伴来接。&lt;/p&gt;
&lt;p&gt;何为范围外：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;boolean&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;cannotArrive&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Elevator&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;elevator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PersonRequest&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;boolean&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;upperCannot&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;getFloorNumber&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getFromFloor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;elevator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getTransferFloorNumber&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;||&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;getFloorNumber&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getFromFloor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;elevator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getTransferFloorNumber&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;getFloorNumber&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getToFloor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;getFloorNumber&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getFromFloor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()));&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;boolean&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lowerCannot&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;getFloorNumber&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getFromFloor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;elevator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getTransferFloorNumber&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;||&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;getFloorNumber&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getFromFloor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;elevator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getTransferFloorNumber&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;getFloorNumber&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getToFloor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;getFloorNumber&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getFromFloor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()));&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;elevator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;isUpper&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;upperCannot&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;||&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;elevator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;isUpper&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lowerCannot&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;同步与防撞设计&#34;&gt;同步与防撞设计
&lt;/h2&gt;&lt;p&gt;在这两处上我都是用了信号+while+sleep的方法。  &lt;br&gt;
他看起来很像轮询，但他可慢太多了，循环的次数不会超过15次。&lt;/p&gt;
&lt;h3 id=&#34;同步启动update&#34;&gt;同步启动UPDATE
&lt;/h3&gt;&lt;p&gt;当电梯满足UPDATE条件时，我会设置该电梯的canUpdate属性为true。    &lt;br&gt;
当upper电梯已经setCanUpdate(true)，试图发送UPDATE-BEGIN之前，      &lt;br&gt;
在大家准备sleep(1000)之前，     &lt;br&gt;
便会经历&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;try&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;canStartUpdate&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;other&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getCanStartUpdate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//System.out.println(othId + &amp;#34; is closing&amp;#34;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Thread&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;sleep&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;50&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;catch&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;InterruptedException&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;throw&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;RuntimeException&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;电梯防撞&#34;&gt;电梯防撞
&lt;/h3&gt;&lt;p&gt;我将transferFloor楼层的运转高度规范化。&lt;/p&gt;
&lt;p&gt;对于advice为GO时，会根据当前电梯是否为双轿厢而执行go()或doubleGo()&lt;/p&gt;
&lt;p&gt;doubleGo()存在一个判断，就是你是不是正在前往transferFloor。&lt;/p&gt;
&lt;p&gt;如果不是就正常go，如果是的话，会触发：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;other&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;curFloor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;equals&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;transferFloor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;halt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;和一个tryToGo()操作。&lt;/p&gt;
&lt;p&gt;tryToGo()会直接先把电梯的楼层设置为transferFloor，避免撞车。接着进行睡200与输出ARRIVE，接着进行开门放人与进人，接着关门和离开这一楼层，最后再更新电梯楼层。&lt;/p&gt;
&lt;p&gt;核心目标就是transferFloor的操作要尽可能的规范与固定，这样虽然死板，但是可控性很强。&lt;/p&gt;
&lt;h2 id=&#34;bug与debug&#34;&gt;BUG与DEBUG
&lt;/h2&gt;&lt;p&gt;不忍提及。本次作业的滑铁卢是我始料未及的，也许从我放弃搭评测机的那一刻就决定了&amp;hellip;&lt;/p&gt;
&lt;p&gt;没有评测机的话，我只能识别出最基本的RTLE与CTLE。&lt;/p&gt;
&lt;p&gt;hw5没有什么好说的。  &lt;br&gt;
hw6已经初现端倪：强测1bug，互测1bug      &lt;br&gt;
hw7的bug已经数不胜数了。&lt;/p&gt;
&lt;p&gt;这其中最最重要的原因，就是DispatchThread的终结控制。         &lt;br&gt;
实际上，这可能是我这一整次迭代作业最大的败笔。&lt;/p&gt;
&lt;p&gt;一般来说，应当设置一个计数器，记录request的完成情况。没有完成就不要让分发线程终结。对于需要重新分发的请求，只需要扔回分发线程即可。&lt;/p&gt;
&lt;p&gt;可我并非如此。&lt;/p&gt;
&lt;p&gt;我所有的OUT-F、SCHE、UPDATE导致的无效化，全部都是手动分配电梯，手动输出RECEIVE。&lt;/p&gt;
&lt;p&gt;这么做的漏洞：  RECEIVE重复！&lt;/p&gt;
&lt;p&gt;可能你一个任务被dispatch分发给了电梯A，而电梯A自身的RECEIVE逻辑与dispatch并没有沟通交流，使得电梯A极有可能把dispatch给他的新请求当作无效请求分配出去。除此之外，其他电梯给电梯A分配的新请求在某种时机下也会被重新分配。&lt;/p&gt;
&lt;p&gt;但是只要交给dispatch，RECEIVE一定能在这个电梯离开无效状态后才会分配给他。&lt;/p&gt;
&lt;p&gt;其实本质上就是，自己由于对死锁的畏惧，并没有增添电梯对分发线程的信息获取。&lt;/p&gt;
&lt;p&gt;直到bug修复阶段，经过评测机的重重评测，我在重构了receive和发现隐藏bug后，终于实现了稳定通过bug修复。&lt;/p&gt;
&lt;p&gt;评测机是必要的！OOU2不能没有评测机！&lt;/p&gt;
&lt;h2 id=&#34;心得体会&#34;&gt;心得体会
&lt;/h2&gt;&lt;p&gt;今天回顾了OOU1的单元总结。哈，还真是高高在上呢。&lt;/p&gt;
&lt;p&gt;直到现实重击才清醒过来吗？优美的层次化结构并不是轻易就能实现的。&lt;/p&gt;
&lt;p&gt;在bug修复的重重测试之下，终于交出一份满意答卷后，方才意识到自己的问题，竟在于没有做好elevator到requestQueue的回撤，导致自己自行添加了混乱的数据线，毁坏了原有的逻辑链条。在大家都在de撞车、de静默状态RECEIVE的同步问题时，我却在为自己特有的无意义实现而缝缝补补。&lt;/p&gt;
&lt;p&gt;层次化结构很重要，也很值得考量。要在局部书写的时候尽力保有全局观。&lt;/p&gt;
&lt;p&gt;至于线程安全，我认为线程之间的通信接口主要就是getter与setter，只是取当前时间的情况进行策略决断，可以避免长时间占用锁。&lt;/p&gt;
&lt;p&gt;此外避免死锁可以通过规避相互调用。尤其是在两个同类线程在相互上锁的时候，死锁率极高。因此一般考虑用对地位不等、也就是不会相互调用的两个对象上锁，例如在做receive回撤的时候，就直接返回到allrequest中，对它上锁当然是不会死锁的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在电梯反复运行中感受时间的流逝，从线程的独立与交融中培养多核大脑。&lt;/strong&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>北航OO U1 递归下降与表达式解析</title>
        <link>https://demiurge-zby.github.io/p/%E5%8C%97%E8%88%AAoo-u1-%E9%80%92%E5%BD%92%E4%B8%8B%E9%99%8D%E4%B8%8E%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%A7%A3%E6%9E%90/</link>
        <pubDate>Tue, 18 Mar 2025 12:15:30 +0800</pubDate>
        
        <guid>https://demiurge-zby.github.io/p/%E5%8C%97%E8%88%AAoo-u1-%E9%80%92%E5%BD%92%E4%B8%8B%E9%99%8D%E4%B8%8E%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%A7%A3%E6%9E%90/</guid>
        <description>&lt;img src="https://demiurge-zby.github.io/p/%E5%8C%97%E8%88%AAoo-u1-%E9%80%92%E5%BD%92%E4%B8%8B%E9%99%8D%E4%B8%8E%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%A7%A3%E6%9E%90/123.png" alt="Featured image of post 北航OO U1 递归下降与表达式解析" /&gt;&lt;p&gt;本次作业以解析表达式并简化后输出为核心任务。&lt;/p&gt;
&lt;p&gt;主要的实现过程为：   &lt;br&gt;
&lt;code&gt;预处理&lt;/code&gt;-&amp;gt;&lt;code&gt;解析&lt;/code&gt;-&amp;gt;&lt;code&gt;化简&lt;/code&gt;-&amp;gt;&lt;code&gt;输出&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;迭代过程综述&#34;&gt;迭代过程综述
&lt;/h2&gt;&lt;h3 id=&#34;预处理的迭代&#34;&gt;预处理的迭代
&lt;/h3&gt;&lt;p&gt;第一次作业：空白字符与正负号     &lt;br&gt;
第二次作业：递推函数     &lt;br&gt;
第三次作业：自定义函数&lt;/p&gt;
&lt;h3 id=&#34;解析的迭代&#34;&gt;解析的迭代
&lt;/h3&gt;&lt;p&gt;第一次作业：常数因子、幂函数因子、表达式因子    &lt;br&gt;
第二次作业：三角因子
第三次作业：求导因子&lt;/p&gt;
&lt;h3 id=&#34;化简的迭代&#34;&gt;化简的迭代
&lt;/h3&gt;&lt;p&gt;第一次作业：多项式的加乘幂   &lt;br&gt;
第二次作业：含三角函数的加乘幂及其化简   &lt;br&gt;
第三次作业：求导运算&lt;/p&gt;
&lt;h3 id=&#34;输出的迭代&#34;&gt;输出的迭代
&lt;/h3&gt;&lt;p&gt;第一次作业：输出多项式   &lt;br&gt;
第二次作业：输出含三角函数的表达式
第三次作业：无&lt;/p&gt;
&lt;h2 id=&#34;第一次作业&#34;&gt;第一次作业
&lt;/h2&gt;&lt;p&gt;刚刚走进面向对象课堂的第一天，就被HW1深刻地击溃了。      &lt;br&gt;
不同于其他同学只是担心可扩展性不够强而不肯动笔————我的大脑是完全空白的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;我知道是这个道理，但是到底怎么写？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我认为理解递归下降实际运行的关键，在于深刻理解lexer的执行逻辑，lexer作为parser的属性，是唯一确定的，&lt;strong&gt;当我解析完成，lexer也就走完了。解析的过程就是lexer的前进过程。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;而我们做的事情，就是根据读取expression，&lt;strong&gt;自行出构建一个新的、有结构的Expr。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;接下来的toPoly便也是递归下降的一种体现。&lt;strong&gt;我已经知道最小单元Mono与Power有它具体的toPoly()方法&lt;/strong&gt;，那么我就可以采用递归下降，对每一个类只着眼于它自身的运算过程。&lt;/p&gt;
&lt;h3 id=&#34;代码量&#34;&gt;代码量
&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://demiurge-zby.github.io/p/%E5%8C%97%E8%88%AAoo-u1-%E9%80%92%E5%BD%92%E4%B8%8B%E9%99%8D%E4%B8%8E%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%A7%A3%E6%9E%90/hw1_lines.png&#34;
	width=&#34;1744&#34;
	height=&#34;357&#34;
	srcset=&#34;https://demiurge-zby.github.io/p/%E5%8C%97%E8%88%AAoo-u1-%E9%80%92%E5%BD%92%E4%B8%8B%E9%99%8D%E4%B8%8E%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%A7%A3%E6%9E%90/hw1_lines_hu1348462638036344911.png 480w, https://demiurge-zby.github.io/p/%E5%8C%97%E8%88%AAoo-u1-%E9%80%92%E5%BD%92%E4%B8%8B%E9%99%8D%E4%B8%8E%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%A7%A3%E6%9E%90/hw1_lines_hu679612040571503907.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;hw1_lines&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;488&#34;
		data-flex-basis=&#34;1172px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;可以看出核心代码在于解析Parser与化简Poly这两个类中。&lt;/p&gt;
&lt;h3 id=&#34;uml类图&#34;&gt;UML类图
&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://demiurge-zby.github.io/p/%E5%8C%97%E8%88%AAoo-u1-%E9%80%92%E5%BD%92%E4%B8%8B%E9%99%8D%E4%B8%8E%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%A7%A3%E6%9E%90/hw1_graph.png&#34;
	width=&#34;2452&#34;
	height=&#34;1604&#34;
	srcset=&#34;https://demiurge-zby.github.io/p/%E5%8C%97%E8%88%AAoo-u1-%E9%80%92%E5%BD%92%E4%B8%8B%E9%99%8D%E4%B8%8E%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%A7%A3%E6%9E%90/hw1_graph_hu9410046640435313302.png 480w, https://demiurge-zby.github.io/p/%E5%8C%97%E8%88%AAoo-u1-%E9%80%92%E5%BD%92%E4%B8%8B%E9%99%8D%E4%B8%8E%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%A7%A3%E6%9E%90/hw1_graph_hu6616560314303406624.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;hw1_graph&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;152&#34;
		data-flex-basis=&#34;366px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;方法数则是Poly类遥遥领先，不过都是加、乘、幂、去零、取反、输出等基本方法&lt;/p&gt;
&lt;h3 id=&#34;复杂度&#34;&gt;复杂度
&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://demiurge-zby.github.io/p/%E5%8C%97%E8%88%AAoo-u1-%E9%80%92%E5%BD%92%E4%B8%8B%E9%99%8D%E4%B8%8E%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%A7%A3%E6%9E%90/hw1_class.png&#34;
	width=&#34;664&#34;
	height=&#34;445&#34;
	srcset=&#34;https://demiurge-zby.github.io/p/%E5%8C%97%E8%88%AAoo-u1-%E9%80%92%E5%BD%92%E4%B8%8B%E9%99%8D%E4%B8%8E%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%A7%A3%E6%9E%90/hw1_class_hu14704900314256740387.png 480w, https://demiurge-zby.github.io/p/%E5%8C%97%E8%88%AAoo-u1-%E9%80%92%E5%BD%92%E4%B8%8B%E9%99%8D%E4%B8%8E%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%A7%A3%E6%9E%90/hw1_class_hu14458279921066147853.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;hw1_class&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;149&#34;
		data-flex-basis=&#34;358px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;同样的，Parser与Poly的复杂度是远高于其他类的。&lt;/p&gt;
&lt;h3 id=&#34;类的设计&#34;&gt;类的设计
&lt;/h3&gt;&lt;p&gt;PreProcess为预处理类，直接把空格与连续正负号解决掉，简化Parser的处理。&lt;/p&gt;
&lt;p&gt;Mono类与Power类则对应了最小解析单元（因子中的常数，幂函数与表达式因子），这里将常数与幂函数都归为Mono类是很方便的。&lt;/p&gt;
&lt;h2 id=&#34;第二次作业&#34;&gt;第二次作业
&lt;/h2&gt;&lt;p&gt;如果说第一次作业是从零到一的突破，那么第二次作业可能就是从1到x的蜕变。    &lt;br&gt;
三角因子本身的复杂性太强，不能像之前一样简单的归类，更没有统一的计算方法。&lt;/p&gt;
&lt;p&gt;曾经Poly里的加与乘，如今全部都复杂起来了！   &lt;br&gt;
我们只能进行重构。&lt;/p&gt;
&lt;p&gt;对于加法，我们没有曾经直接看x的幂次来进行合并同类项的简单解法，  &lt;br&gt;
因此只有写出同类项判别方法，才能实现加法的简化&lt;/p&gt;
&lt;p&gt;对于乘法，我们需要先实现最小单元之间幂函数幂次与三角因子幂次的累积   &lt;br&gt;
再进行所有乘积项的求和&lt;/p&gt;
&lt;h3 id=&#34;代码量-1&#34;&gt;代码量
&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://demiurge-zby.github.io/p/%E5%8C%97%E8%88%AAoo-u1-%E9%80%92%E5%BD%92%E4%B8%8B%E9%99%8D%E4%B8%8E%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%A7%A3%E6%9E%90/hw2_lines.png&#34;
	width=&#34;1759&#34;
	height=&#34;426&#34;
	srcset=&#34;https://demiurge-zby.github.io/p/%E5%8C%97%E8%88%AAoo-u1-%E9%80%92%E5%BD%92%E4%B8%8B%E9%99%8D%E4%B8%8E%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%A7%A3%E6%9E%90/hw2_lines_hu2733324857433404355.png 480w, https://demiurge-zby.github.io/p/%E5%8C%97%E8%88%AAoo-u1-%E9%80%92%E5%BD%92%E4%B8%8B%E9%99%8D%E4%B8%8E%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%A7%A3%E6%9E%90/hw2_lines_hu12539274716514737244.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;hw2_lines&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;412&#34;
		data-flex-basis=&#34;990px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;较上次作业新增了近800行，其中parser变化不大，而Mono与Poly代码量激增  &lt;br&gt;
此外还有新增的类: 递归函数RecursiveFunc&lt;/p&gt;
&lt;h3 id=&#34;uml类图-1&#34;&gt;UML类图
&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://demiurge-zby.github.io/p/%E5%8C%97%E8%88%AAoo-u1-%E9%80%92%E5%BD%92%E4%B8%8B%E9%99%8D%E4%B8%8E%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%A7%A3%E6%9E%90/hw2_graph.png&#34;
	width=&#34;2362&#34;
	height=&#34;2781&#34;
	srcset=&#34;https://demiurge-zby.github.io/p/%E5%8C%97%E8%88%AAoo-u1-%E9%80%92%E5%BD%92%E4%B8%8B%E9%99%8D%E4%B8%8E%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%A7%A3%E6%9E%90/hw2_graph_hu4824547250586139424.png 480w, https://demiurge-zby.github.io/p/%E5%8C%97%E8%88%AAoo-u1-%E9%80%92%E5%BD%92%E4%B8%8B%E9%99%8D%E4%B8%8E%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%A7%A3%E6%9E%90/hw2_graph_hu2263586557949589371.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;hw2_graph&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;84&#34;
		data-flex-basis=&#34;203px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;我调整了类的相对位置使之更加清晰。&lt;/p&gt;
&lt;p&gt;图片从上到下分别是函数预处理，表达式解析，表达式化简运算与输出&lt;/p&gt;
&lt;h3 id=&#34;复杂度-1&#34;&gt;复杂度
&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://demiurge-zby.github.io/p/%E5%8C%97%E8%88%AAoo-u1-%E9%80%92%E5%BD%92%E4%B8%8B%E9%99%8D%E4%B8%8E%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%A7%A3%E6%9E%90/hw2_class.png&#34;
	width=&#34;664&#34;
	height=&#34;489&#34;
	srcset=&#34;https://demiurge-zby.github.io/p/%E5%8C%97%E8%88%AAoo-u1-%E9%80%92%E5%BD%92%E4%B8%8B%E9%99%8D%E4%B8%8E%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%A7%A3%E6%9E%90/hw2_class_hu1209901690595859210.png 480w, https://demiurge-zby.github.io/p/%E5%8C%97%E8%88%AAoo-u1-%E9%80%92%E5%BD%92%E4%B8%8B%E9%99%8D%E4%B8%8E%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%A7%A3%E6%9E%90/hw2_class_hu15904561665040355737.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;hw2_class&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;135&#34;
		data-flex-basis=&#34;325px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Parser与Poly不出意外的高复杂度。     &lt;br&gt;
但是递推函数类的复杂度异常的高，我承认我当时采用的方法过于粗暴。     &lt;br&gt;
后续果然发现了bug，只是到了第三次作业的环境中才得以体现出来。&lt;/p&gt;
&lt;h3 id=&#34;类的设计-1&#34;&gt;类的设计
&lt;/h3&gt;&lt;p&gt;Mono类秉承着原来解析的最小单元的地位，现在的它，是一个除了表达式因子以外可以包罗万象的Factor,含有常数，幂函数的幂次，三角函数的HashMap&amp;lt;Poly, BigInteger&amp;gt;。&lt;/p&gt;
&lt;p&gt;因此，他也仍然是最终运算的最小单位，充当最终表达式中的项（Term）。&lt;/p&gt;
&lt;p&gt;Poly则是所有Mono的和，用ArrayList实现。&lt;/p&gt;
&lt;p&gt;接下来是RecursiveFunc类。我将函数翻译作为了预处理操作的一部分，实现了在解析开始之前就解决掉了所有的函数问题。这个类的核心作用就是根据已知信息，直接获得一个从0到5的函数Map。&lt;/p&gt;
&lt;p&gt;接着process类也将被重写，并增添替换操作。&lt;/p&gt;
&lt;h2 id=&#34;第三次作业&#34;&gt;第三次作业
&lt;/h2&gt;&lt;p&gt;经历了HW1的无力茫然与HW2的大刀阔斧           &lt;br&gt;
站在HW3面前的你，    &lt;br&gt;
应当充满了决心！&lt;/p&gt;
&lt;h3 id=&#34;代码量-2&#34;&gt;代码量
&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://demiurge-zby.github.io/p/%E5%8C%97%E8%88%AAoo-u1-%E9%80%92%E5%BD%92%E4%B8%8B%E9%99%8D%E4%B8%8E%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%A7%A3%E6%9E%90/hw3_lines.png&#34;
	width=&#34;1749&#34;
	height=&#34;517&#34;
	srcset=&#34;https://demiurge-zby.github.io/p/%E5%8C%97%E8%88%AAoo-u1-%E9%80%92%E5%BD%92%E4%B8%8B%E9%99%8D%E4%B8%8E%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%A7%A3%E6%9E%90/hw3_lines_hu14879122926649187208.png 480w, https://demiurge-zby.github.io/p/%E5%8C%97%E8%88%AAoo-u1-%E9%80%92%E5%BD%92%E4%B8%8B%E9%99%8D%E4%B8%8E%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%A7%A3%E6%9E%90/hw3_lines_hu3319448293189894400.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;hw3_lines&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;338&#34;
		data-flex-basis=&#34;811px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;代码行数增加的并不多&lt;/p&gt;
&lt;p&gt;主要内容是新类的添加，更多的函数代入操作以及求导计算&lt;/p&gt;
&lt;h3 id=&#34;uml类图-2&#34;&gt;UML类图
&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://demiurge-zby.github.io/p/%E5%8C%97%E8%88%AAoo-u1-%E9%80%92%E5%BD%92%E4%B8%8B%E9%99%8D%E4%B8%8E%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%A7%A3%E6%9E%90/hw3_graph.png&#34;
	width=&#34;2882&#34;
	height=&#34;3286&#34;
	srcset=&#34;https://demiurge-zby.github.io/p/%E5%8C%97%E8%88%AAoo-u1-%E9%80%92%E5%BD%92%E4%B8%8B%E9%99%8D%E4%B8%8E%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%A7%A3%E6%9E%90/hw3_graph_hu856977851820666993.png 480w, https://demiurge-zby.github.io/p/%E5%8C%97%E8%88%AAoo-u1-%E9%80%92%E5%BD%92%E4%B8%8B%E9%99%8D%E4%B8%8E%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%A7%A3%E6%9E%90/hw3_graph_hu16451727185006472704.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;hw3_graph&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;87&#34;
		data-flex-basis=&#34;210px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;相较于hw2，在Factor上新增了求导因子，在预处理上新增了NormalFunc以及一个数据功能类Func。&lt;/p&gt;
&lt;h3 id=&#34;复杂度-2&#34;&gt;复杂度
&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://demiurge-zby.github.io/p/%E5%8C%97%E8%88%AAoo-u1-%E9%80%92%E5%BD%92%E4%B8%8B%E9%99%8D%E4%B8%8E%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%A7%A3%E6%9E%90/hw3_class.png&#34;
	width=&#34;654&#34;
	height=&#34;603&#34;
	srcset=&#34;https://demiurge-zby.github.io/p/%E5%8C%97%E8%88%AAoo-u1-%E9%80%92%E5%BD%92%E4%B8%8B%E9%99%8D%E4%B8%8E%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%A7%A3%E6%9E%90/hw3_class_hu5027182664871553546.png 480w, https://demiurge-zby.github.io/p/%E5%8C%97%E8%88%AAoo-u1-%E9%80%92%E5%BD%92%E4%B8%8B%E9%99%8D%E4%B8%8E%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%A7%A3%E6%9E%90/hw3_class_hu11158960634192581642.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;hw3_class&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;108&#34;
		data-flex-basis=&#34;260px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;类的设计-2&#34;&gt;类的设计
&lt;/h3&gt;&lt;p&gt;Derivation类作为一个Factor，需要toPoly()方法，只需要将expr先toPoly，在调用Poly()的derive方法。&lt;/p&gt;
&lt;p&gt;NormalFunc类的设计与RecursiveFunc的思路基本一致，只是少了递推这一步。&lt;/p&gt;
&lt;h2 id=&#34;可扩展性&#34;&gt;可扩展性
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;函数的扩展：
exp函数，只需对Mono类添加一个Poly属性，用于记录指数。
ln函数，同理，只需记录真数。&lt;/li&gt;
&lt;li&gt;变元的扩展：
只需Mono的power变为power1和power2，分别作为两个变元的幂指数&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;bug&#34;&gt;BUG
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;第一次作业 0 bug&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;第二次作业 强测 0 bug 互测 2 bugs
错因是在截止前20min才意识到忘记处理sin(0)与cos(0)，这会对性能产生极大的损害。  &lt;br&gt;
而在优化了这一点之后，由于从未对数字0 ^ 0有过定义，sin(0)^0就变为了0     &lt;br&gt;
而在时间紧迫的情况下，我也没来得及用评测机进行评测。提交截止之后，评测机很快就跑出了该问题。&lt;/p&gt;
&lt;p&gt;另一处bug是犯了很多次的二重循环初始化错误，修改了之后还是遗漏了一个地方。&lt;/p&gt;
&lt;p&gt;正如教程所说，这两个点都是高行与圈复杂度的类（Mono与Poly）所出现的问题，耦合性强，不易被发现。&lt;/p&gt;
&lt;p&gt;若想降低复杂度，也就是解耦合，就需要做好一些预先的规划，将谁该做什么事分清楚。不过Poly与Mono的耦合度高，个人认为是较难避免的。因为Poly里会用到Mono的同类项判别方法，这个方法中又会涉及会Poly(三角函数内)的equal方法，这一equal方法又会归结于Mono&lt;/p&gt;
&lt;p&gt;或者说，Poly跟Mono的关系，就很有一种Expr与Factor的感觉。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;第三次作业 0 bug&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;评测机搭建&#34;&gt;评测机搭建
&lt;/h2&gt;&lt;p&gt;这三周以来很有成就感的一件事，就是我终于主动尝试着搭出了自己的评测机！&lt;/p&gt;
&lt;h3 id=&#34;checkpy比对&#34;&gt;check.py比对
&lt;/h3&gt;&lt;p&gt;利用了sympy库中的函数    &lt;br&gt;
python库就是神通广大（）&lt;/p&gt;
&lt;h3 id=&#34;dataexe数据生成&#34;&gt;data.exe数据生成
&lt;/h3&gt;&lt;p&gt;核心内容&lt;/p&gt;
&lt;p&gt;我使用的是随机暴力生成的方法&lt;/p&gt;
&lt;p&gt;构建的逻辑就是递归下降咯&lt;/p&gt;
&lt;p&gt;printExpr-&amp;gt;printTerm-&amp;gt;printFactor&lt;/p&gt;
&lt;h3 id=&#34;bat批处理程序运行&#34;&gt;bat批处理程序运行
&lt;/h3&gt;&lt;p&gt;学习了一些基本运行语句： &lt;br&gt;
java -jar .jar
python .py
.exe&lt;/p&gt;
&lt;p&gt;利用了一些基础的重定向。&lt;/p&gt;
&lt;h2 id=&#34;bug分析&#34;&gt;BUG分析
&lt;/h2&gt;&lt;p&gt;首先是评测机暴力跑数据，通过简化数据点抓住核心问题数据，再定位到代码的具体漏洞位置。这一招在hw2中就大杀四方，获得了5个不同质的bug。&lt;/p&gt;
&lt;p&gt;其次便是手动构造边界数据，尤其是0,0次幂，1次幂等特殊情况，多加测试。&lt;/p&gt;
&lt;p&gt;遗憾的是，由于代码阅读能力不够强，我常常没有心力去认真观察他人的代码来寻找bug。&lt;/p&gt;
&lt;h2 id=&#34;优化&#34;&gt;优化
&lt;/h2&gt;&lt;h3 id=&#34;输出符号优化&#34;&gt;输出符号优化
&lt;/h3&gt;&lt;p&gt;hw1便涉及到的，存在正项则提前&lt;/p&gt;
&lt;h3 id=&#34;sin-cos正负号优化&#34;&gt;sin cos正负号优化
&lt;/h3&gt;&lt;p&gt;对于因子内部全为负的三角因子，我会直接对该Poly使用negate方法，使其含有正项，从而缩短长度&lt;/p&gt;
&lt;p&gt;这一处理在某种程度上也统一了一些格式，便于同类项的判断&lt;/p&gt;
&lt;p&gt;不足之处在于还是不能用于全面的判断两个Poly是Opposite的，例如1-x与x-1，便不会经过处理，从而后续不会被判定为同类项&lt;/p&gt;
&lt;p&gt;改进： 我们可以采用相加等于0的方法来判断Poly的isOpposite&lt;/p&gt;
&lt;h3 id=&#34;sin-2cos-2-sin-2-cos-2--sin-4-cos-4&#34;&gt;sin^ 2+cos^ 2 sin^ 2-cos^ 2  sin^ 4-cos^ 4
&lt;/h3&gt;&lt;p&gt;为了能够处理嵌套括号内的该类内容，我选择了在每次addPoly()时都加以判断，并且提取了公因式（不过无法处理幂次的公因式，比如sin(x)^ 3+cos(x)^ 2*sin(x)）。&lt;/p&gt;
&lt;p&gt;一处问题：在二倍角过程中，我改变了三角因子的Poly。这一行为决定了我们必须使用深克隆！&lt;/p&gt;
&lt;p&gt;另一处问题：过于频繁与紧急的匹配会导致&lt;strong&gt;贪心&lt;/strong&gt;，例如sin(x)^ 2 - cos(x) ^2 + cos(x) ^2, 便会被我使用二倍角，从而闹出笑话。&lt;/p&gt;
&lt;p&gt;改进：在最后再处理化简工作，至于嵌套，可选择遍历内部嵌套进行化简。&lt;/p&gt;
&lt;h2 id=&#34;心得体会&#34;&gt;心得体会
&lt;/h2&gt;&lt;p&gt;作为第一章，面向对象的思想已经比较清晰地发散开来了。递归下降这一算法，本身就是十分符合面向对象的思维方式，每个类做好自己的算法，问题一定能得到解决。&lt;/p&gt;
&lt;p&gt;hw2是很不错的一次体验，虽然是最辛苦的一周，但是无畏地向前探索，不合适就重构的勇气是很宝贵的。&lt;/p&gt;
&lt;p&gt;搭建评测机也是很奇妙的一次体验。自主学习的收获总是刻骨铭心。&lt;/p&gt;
&lt;h2 id=&#34;未来方向&#34;&gt;未来方向
&lt;/h2&gt;&lt;p&gt;个人认为递归下降的内容如果能在理论课上详细结合代码来讲解运行逻辑，可能hw1就不会显得那么痛苦（）&lt;/p&gt;
&lt;p&gt;但是这种痛苦也是有益的，至少它让我从懵懂的第一周里清醒过来：&lt;/p&gt;
&lt;p&gt;面向对象的挑战，已然开始。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>北航OO U1 HW1 表达式解析</title>
        <link>https://demiurge-zby.github.io/p/%E5%8C%97%E8%88%AAoo-u1-hw1-%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%A7%A3%E6%9E%90/</link>
        <pubDate>Mon, 03 Mar 2025 12:15:30 +0800</pubDate>
        
        <guid>https://demiurge-zby.github.io/p/%E5%8C%97%E8%88%AAoo-u1-hw1-%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%A7%A3%E6%9E%90/</guid>
        <description>&lt;img src="https://demiurge-zby.github.io/p/%E5%8C%97%E8%88%AAoo-u1-hw1-%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%A7%A3%E6%9E%90/123.png" alt="Featured image of post 北航OO U1 HW1 表达式解析" /&gt;&lt;h2 id=&#34;作业实现&#34;&gt;作业实现
&lt;/h2&gt;&lt;h3 id=&#34;预处理&#34;&gt;预处理
&lt;/h3&gt;&lt;p&gt;replaceAll()函数 &lt;br&gt;
解决空白符与连续正负号&lt;/p&gt;
&lt;h3 id=&#34;表达式解析递归下降&#34;&gt;表达式解析（递归下降）
&lt;/h3&gt;&lt;p&gt;递归下降的特点是下降和递归。 &lt;br&gt;
下降实现了功能的独立性。 &lt;br&gt;
而递归是由要解析的表达式的结构决定的。&lt;/p&gt;
&lt;h4 id=&#34;lexer的作用&#34;&gt;Lexer的作用
&lt;/h4&gt;&lt;p&gt;核心作用是处理数字，将连续的数字字符变为一个token单位&lt;br&gt;
其他保持不变&lt;/p&gt;
&lt;p&gt;提供方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当前token是什么   &lt;code&gt;peek()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;去下一个token  &lt;code&gt;next()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其实就相当于C语言字符串中的&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;str[i]&lt;/li&gt;
&lt;li&gt;i++&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;只是我们需要的信息没那么多，就不采用先把式子变成token的ArrayList再去解析的方法   &lt;br&gt;
而是在解析的时候利用lexer作为移动和识别的工具&lt;/p&gt;
&lt;h4 id=&#34;parseexpr&#34;&gt;parseExpr
&lt;/h4&gt;&lt;p&gt;Expr是Term的和&lt;br&gt;
通过加减符号实现Term的分割&lt;/p&gt;
&lt;p&gt;判加减  (用&lt;code&gt;peek()&lt;/code&gt;判内容  用&lt;code&gt;next()&lt;/code&gt;进入下一token)  &lt;br&gt;
parseTerm() addTerm()     &lt;br&gt;
循环：   &lt;br&gt;
判加减  (用&lt;code&gt;peek()&lt;/code&gt;判内容  用&lt;code&gt;next()&lt;/code&gt;进入下一token)  &lt;br&gt;
parseTerm() addTerm()&lt;/p&gt;
&lt;h4 id=&#34;parseterm&#34;&gt;parseTerm
&lt;/h4&gt;&lt;p&gt;Term是Factor的积
通过乘号实现Factor的分割（其中第一个Factor可有额外正负号）&lt;/p&gt;
&lt;p&gt;判加减  (用&lt;code&gt;peek()&lt;/code&gt;判内容  用&lt;code&gt;next()&lt;/code&gt;进入下一token)  &lt;br&gt;
parseFactor() addFactor()&lt;br&gt;
循环：   &lt;br&gt;
判乘号  (用&lt;code&gt;peek()&lt;/code&gt;判内容  用&lt;code&gt;next()&lt;/code&gt;进入下一token)  &lt;br&gt;
parseFactor() addFactor()&lt;/p&gt;
&lt;h4 id=&#34;parsefactor&#34;&gt;parseFactor
&lt;/h4&gt;&lt;p&gt;Factor约等于解析最底层&lt;/p&gt;
&lt;p&gt;分为三类，需要建立接口&lt;/p&gt;
&lt;p&gt;常数因子与幂函数因子可以用 &lt;code&gt;A*x^b&lt;/code&gt;统一   &lt;br&gt;
表达式因子分为&lt;code&gt;(Expr)&lt;/code&gt;与&lt;code&gt;(Expr)^n&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;所以Expr类，Mono类&lt;code&gt;A*x^b&lt;/code&gt;和Power类&lt;code&gt;(Expr)^n&lt;/code&gt;都需要Factor接口，以在解析完成时返回Factor类型的结果&lt;/p&gt;
&lt;p&gt;其中Expr还能下降为&lt;code&gt;A*x^b&lt;/code&gt;，&lt;code&gt;(Expr)&lt;/code&gt;与&lt;code&gt;(Expr)^n&lt;/code&gt;    &lt;br&gt;
因此最小单位就是Mono类&lt;code&gt;A*x^b&lt;/code&gt;和Power类&lt;code&gt;(Expr)^n&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;解析方法：&lt;/p&gt;
&lt;p&gt;先判一下加减  (用&lt;code&gt;peek()&lt;/code&gt;判内容  用&lt;code&gt;next()&lt;/code&gt;进入下一token)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;判到左括号  (用&lt;code&gt;peek()&lt;/code&gt;判内容  用&lt;code&gt;next()&lt;/code&gt;进入下一token)&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;parseExpr();&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;把右括号跳过 &lt;code&gt;next()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;判^  (用&lt;code&gt;peek()&lt;/code&gt;判内容  用&lt;code&gt;next()&lt;/code&gt;进入下一token)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;有^ : （若有正号先next()掉）peek()读取指数 再&lt;code&gt;next()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;指数是0 ： return Mono类 1*x^0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;否则： return Power类&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;无^ ：直接return Expr类&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;判到数字 (用&lt;code&gt;peek()&lt;/code&gt;判内容  用&lt;code&gt;next()&lt;/code&gt;进入下一token)&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;Mono类 数字*x^0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;判到x&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;Mono类 1*x^n 无^时n=1特殊处理&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;关于正负传参&#34;&gt;关于正负：传参
&lt;/h4&gt;&lt;p&gt;我在解析过程中将正负号落实到了Mono类与Power类    &lt;br&gt;
这样，Factor之间只是乘，Term之间只是加，相对简单&lt;/p&gt;
&lt;p&gt;落实的方法: 传参 isNeg
初始参数值，即MainClass调用时是parseExpr(false)  &lt;br&gt;
改变的规则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;根据传入参数，在解析方法定义内部变量isNegative，用于传递给下级&lt;/li&gt;
&lt;li&gt;遇到负号，isNegative = !isNegative&lt;/li&gt;
&lt;li&gt;对于Expr到Term符号的继承，每一项isNegative的初始值都是isNeg&lt;/li&gt;
&lt;li&gt;对于Term到Factor符号的继承，只有第一项isNegative的初始值是isNeg，其余初始值为False&lt;/li&gt;
&lt;li&gt;特别的，对于Power类型，其Expr由于先被解析，所以正负号已经落实到内部，这时候Power的正负性就应该做出调整：&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;若符号为正，则无影响&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;若符号为负，且指数为奇数，则Power类型应当必须为正数，因为负属性已经在Expr中展现了&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;若符号为负，且指数为偶数，则Expr的负属性不能展现，Power类型需要为负&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最终正负就落实到Mono与Power上，这两个类有isNeg属性&lt;/p&gt;
&lt;h3 id=&#34;表达式求值&#34;&gt;表达式求值
&lt;/h3&gt;&lt;p&gt;最终结果为多项式，而Mono和Power也可变为多项式。  &lt;br&gt;
只需先转化为多项式，再实现多项式的加与乘即可。&lt;/p&gt;
&lt;h4 id=&#34;poly类&#34;&gt;Poly类
&lt;/h4&gt;&lt;p&gt;只是有一个TreeMap，里面放着键值对&lt;code&gt;&amp;lt;指数，系数&amp;gt;&lt;/code&gt;  &lt;br&gt;
TreeMap的优势在于merge()方法和有序   &lt;br&gt;
merge方法在加入一个键值对可以实现合并同类项的作用&lt;/p&gt;
&lt;h4 id=&#34;mono的topoly&#34;&gt;Mono的toPoly()
&lt;/h4&gt;&lt;p&gt;先处理Negate(),直接系数取负
然后直接new一个Poly，让其TreeMap去put(指数，系数)&lt;/p&gt;
&lt;h4 id=&#34;power的topoly&#34;&gt;Power的toPoly()
&lt;/h4&gt;&lt;p&gt;需要有Expr的toPoly(),再使用Poly的幂运算，再实施Negate()&lt;/p&gt;
&lt;h4 id=&#34;exprtermfactor的topoly&#34;&gt;Expr,Term,Factor的toPoly()
&lt;/h4&gt;&lt;p&gt;Expr就是Term的toPoly()的和   &lt;br&gt;
Term就是Factor的toPoly()的积     &lt;br&gt;
Factor的toPoly()借助接口就是Mono,Expr与Power的toPoly()&lt;/p&gt;
&lt;h4 id=&#34;poly的加乘幂&#34;&gt;Poly的加，乘，幂
&lt;/h4&gt;&lt;p&gt;加法直接merge进去    &lt;br&gt;
乘法双重循环一项项merge进去（需注意只有一个因子时，另一个因子应变为&amp;lt;0,1&amp;gt;）   &lt;br&gt;
幂可用快速幂，也可直接循环乘。同样注意上述问题。&lt;/p&gt;
&lt;p&gt;当然三种运算最后都应去除系数为0的单项式&lt;/p&gt;
&lt;h3 id=&#34;结果的输出&#34;&gt;结果的输出
&lt;/h3&gt;&lt;p&gt;由于结果是多项式，输出相对简单。&lt;/p&gt;
&lt;p&gt;需要注意：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;空Tree要输出0&lt;/li&gt;
&lt;li&gt;若存在单项式系数为正，应将其提前并省略正号&lt;/li&gt;
&lt;li&gt;指数为0的项只输出数字，指数为1的项只输出x，指数为-1的项只输出-x&lt;/li&gt;
&lt;li&gt;中间的正项需额外输出+&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;评测机实现&#34;&gt;评测机实现
&lt;/h2&gt;&lt;h3 id=&#34;datamaker&#34;&gt;DataMaker
&lt;/h3&gt;&lt;p&gt;使用c程序，同样使用递归下降的方法去生成表达式&lt;br&gt;
printExpr() -&amp;gt; printTerm() -&amp;gt; printFactor() -&amp;gt; &amp;hellip;   &lt;br&gt;
用rand()随机项数，因子数，正负号，以及因子的种类等等&lt;/p&gt;
&lt;h3 id=&#34;check&#34;&gt;Check
&lt;/h3&gt;&lt;p&gt;由于Python库的强大，这里使用了Python的sympy库  &lt;br&gt;
检测两个表达式化简结果是否相等，实现了对拍&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;sympy&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sympy&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;symbols&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;x&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;with&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;open&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;./outA.txt&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fileA&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;e1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fileA&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;read&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;replace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;expr1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;e1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;replace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;^&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;**&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;with&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;open&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;./outB.txt&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fileB&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;e2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fileB&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;read&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;replace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;expr2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;e2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;replace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;^&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;**&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;expr1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sympy&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;simplify&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;expr1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ratio&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;expr2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sympy&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;simplify&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;expr2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ratio&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sympy&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;simplify&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;expr1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;expr2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;True&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;False&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;data:&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;with&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;open&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;./in.txt&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;filein&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;filein&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;read&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;right:&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;yours:&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;运行脚本&#34;&gt;运行脚本
&lt;/h3&gt;&lt;p&gt;Windows系统的bat脚本和OS学习的Linux脚本异曲同工&lt;/p&gt;
&lt;p&gt;主要使用了这些操作&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;指令&lt;/th&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;作用&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;REM&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;注释&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;java -jar 名称.jar&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;运行jar包&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;名称.exe&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;运行.exe文件&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;python 名称.py&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;运行python程序&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;&amp;lt; ，&amp;gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;实现重定向&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bat&#34; data-lang=&#34;bat&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;echo&lt;/span&gt; off
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;/l&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;%%&lt;/span&gt;i &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;normaldata.exe &lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; in.txt
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;java -jar oo_homework_2025_xxxxxxxx_hw_1.jar &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt; in.txt &lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; outA.txt
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;java -jar 1.jar &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt; in.txt &lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; outB.txt
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;python check.py
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;java -jar 2.jar &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt; in.txt &lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; outB.txt
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;python check.py
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;java -jar 3.jar &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt; in.txt &lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; outB.txt
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;python check.py
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;java -jar 4.jar &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt; in.txt &lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; outB.txt
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;python check.py
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;java -jar 5.jar &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt; in.txt &lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; outB.txt
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;python check.py
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;java -jar 6.jar &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt; in.txt &lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; outB.txt
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;python check.py
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;java -jar 7.jar &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt; in.txt &lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; outB.txt
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;python check.py
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;echo&lt;/span&gt; -------------------------------------------------------
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;cmd
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;如何制作jar包&#34;&gt;如何制作jar包
&lt;/h3&gt;&lt;p&gt;具体流程可自行搜索。&lt;/p&gt;
&lt;p&gt;文件-&amp;gt;项目结构-&amp;gt;工件-&amp;gt; + -&amp;gt; JAR -&amp;gt; &amp;hellip;&lt;/p&gt;
&lt;p&gt;构建-&amp;gt;构建工件&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
