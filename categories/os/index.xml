<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>OS on Demiurge</title>
        <link>https://demiurge-zby.github.io/categories/os/</link>
        <description>Recent content in OS on Demiurge</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>Demiurge</copyright>
        <lastBuildDate>Fri, 14 Mar 2025 11:15:30 +0800</lastBuildDate><atom:link href="https://demiurge-zby.github.io/categories/os/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>北航OS Lab0 上机</title>
        <link>https://demiurge-zby.github.io/p/%E5%8C%97%E8%88%AAos-lab0-%E4%B8%8A%E6%9C%BA/</link>
        <pubDate>Fri, 14 Mar 2025 11:15:30 +0800</pubDate>
        
        <guid>https://demiurge-zby.github.io/p/%E5%8C%97%E8%88%AAos-lab0-%E4%B8%8A%E6%9C%BA/</guid>
        <description>&lt;img src="https://demiurge-zby.github.io/p/%E5%8C%97%E8%88%AAos-lab0-%E4%B8%8A%E6%9C%BA/123.png" alt="Featured image of post 北航OS Lab0 上机" /&gt;&lt;h2 id=&#34;exam&#34;&gt;exam
&lt;/h2&gt;&lt;p&gt;不错的exam。考核内容完全来自于指导书与作业，并且足够全面。        &lt;br&gt;
这在lab上机中是很好的设计，掌握不那么牢固的可以通过花费一点时间阅读指导书拿到exam这一主要分数，提升掌握水平      &lt;br&gt;
而相对熟练的同学则可以更快地解决exam去攻克extra了。&lt;/p&gt;
&lt;p&gt;另外，一定要认真读前言里的要求！本次exam题就需要先bash init.sh才能得到所需文件&lt;/p&gt;
&lt;p&gt;题目有两道：Makefile与Shell&lt;/p&gt;
&lt;h3 id=&#34;makefile&#34;&gt;Makefile
&lt;/h3&gt;&lt;p&gt;Makefile考的仍然是gcc,run和clean三件套&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;.PHONY: clean
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;all: check.o
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	make check
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	gcc -I ./src/include ./src/main.c ./src/output.c -o ./out/main
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;check: check.c
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	gcc -c check.o check.c
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;run: out/main
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	./out/main
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;clean:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	rm -rf check.o
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	rm -rf ./out/main
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;不过这次在gcc上的考点比较新：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;编译不链接 gcc -c&lt;/li&gt;
&lt;li&gt;非标准库头文件 gcc -I 头文件目录&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;此外，还考查了make A任务内调用make B的内容&lt;/p&gt;
&lt;p&gt;也可以考察跨目录make调用&lt;br&gt;
即 cd 目录 &amp;amp;&amp;amp; make&lt;/p&gt;
&lt;h3 id=&#34;shell&#34;&gt;Shell
&lt;/h3&gt;&lt;p&gt;本题一共有九问，也就是九个功能，    &lt;br&gt;
比较惹人烦的点在于这九个功能要在9个脚本中分别实现&lt;/p&gt;
&lt;p&gt;如果你足够熟悉，  &lt;br&gt;
你可以直接
&lt;code&gt;sed -i &#39;1i#!/bin/bash&#39; exam_*.sh&lt;/code&gt;
来为每一行开头加上&lt;code&gt;#!/bin/bash&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;九个脚本的内容是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在指定目录下新建目录&lt;/li&gt;
&lt;li&gt;grep指令&lt;/li&gt;
&lt;li&gt;mv指令&lt;/li&gt;
&lt;li&gt;cp -r指令&lt;/li&gt;
&lt;li&gt;循环语句与sed 替换&lt;/li&gt;
&lt;li&gt;通配符*&lt;/li&gt;
&lt;li&gt;2&amp;raquo;&lt;/li&gt;
&lt;li&gt;chmod&lt;/li&gt;
&lt;li&gt;条件语句&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;需要注意的一些点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;双引号，单引号 &lt;br&gt;
取决你是否要解析引号内的内容&lt;/p&gt;
&lt;p&gt;对于awk中$1有特殊含义，便需要单引号处理&lt;/p&gt;
&lt;p&gt;而sed中如果需要$1参数，那当然是要用双引号的&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$符号作为尾行，又是参数解析符号，若要从$1到$进行p，如果写成sed -n &amp;lsquo;$1,$p&amp;rsquo;的话，$1不能解析；写成sed -n &amp;ldquo;$1,$p&amp;quot;的话，p又会被解析。 &lt;br&gt;
那么我们可以用空格分隔开。即sed -n &amp;ldquo;$1,$ p&amp;rdquo;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;脚本内加减运算的写法，if,for,while,case的写法&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;extra&#34;&gt;extra
&lt;/h2&gt;&lt;p&gt;接下来来到万恶的extra   &lt;br&gt;
其本身的难度可能也不能直接称之为高，但是我还是认为应该明确地表示充分利用hint的内容&lt;/p&gt;
&lt;p&gt;因为hint中的内容，不仅太多，而且太重要，太必要！&lt;/p&gt;
&lt;p&gt;对于第二问ln -s的超链接写法，这显然是回去看hint的，因为完全没有听说过&lt;/p&gt;
&lt;p&gt;但是第一问不仅hint很晚才更新，另外还伪装成不用hint也能解决的问题，使很多同学花费了很多时间去用man来看已知指令的参数&lt;/p&gt;
&lt;p&gt;其次，后置测试点依赖前置测试点。虽然他确实对于评测是更方便的，但是偏偏在第一问出现hint的缺失，从而影响到整个题目的得分，给人的体验还是不太好的。&lt;/p&gt;
&lt;h3 id=&#34;gencode&#34;&gt;genCode
&lt;/h3&gt;&lt;p&gt;第一问的主要任务是： &lt;br&gt;
对于指定目录下的所有.sh文件，将其经过一些简单的sed文件处理后，以&lt;code&gt;原名称(不含.sh).c&lt;/code&gt;的新名字存放在新的指定目录。&lt;/p&gt;
&lt;p&gt;其他的都不难，最难的就在于怎么实现获取文件名与文件重命名&lt;/p&gt;
&lt;p&gt;大多数同学都尝试过&lt;code&gt;sed xxxxxx *.sy &amp;gt; *.c&lt;/code&gt; 然后意外的发现只生成了一个名为&lt;code&gt;&#39;*.c&#39;&lt;/code&gt;的文件&amp;hellip;&amp;hellip;&lt;/p&gt;
&lt;p&gt;笔者找了找mv的man&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;mv是笔者知道的唯一的重命名指令&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;然后找到了-S, &amp;ndash;suffix=[后缀名]这样的东西。&lt;/p&gt;
&lt;p&gt;当然并没能实现功能。&lt;/p&gt;
&lt;p&gt;后来助教说extra内容更新了。我看了眼题面，感觉没变，以为是第四第五题改了，就没在意。实际上发布的正是第一题的hint,能够实现对一个目录下所有文件都访问，并获取其文件名。&lt;/p&gt;
&lt;p&gt;那么本题的考点就是awk指令  &lt;br&gt;
awk -F.并取$1来获得.sy前面的内容&lt;/p&gt;
&lt;h3 id=&#34;selectcode&#34;&gt;selectCode
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;若存在则删除xxx&lt;/p&gt;
&lt;p&gt;考察的其实是rm -f强制执行（若不存在则自动忽视）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ln -s （hint 超链接操作）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;gcc -I -o&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;selectdata&#34;&gt;selectData
&lt;/h3&gt;&lt;p&gt;本小问需要实现将所有的xx_yy.in与xx_yy.out文件根据参数进行复制。(xx与yy都是随机的)&lt;/p&gt;
&lt;p&gt;若参数为all，则全部复制到指定目录 &lt;br&gt;
否则，仅复制参数_yy.in与参数_yy.out到指定目录&lt;/p&gt;
&lt;p&gt;这里可以使用case语句&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-.sh&#34; data-lang=&#34;.sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#!/bin/bash
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;mkdir dataSet
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$1&lt;/span&gt; in
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; all &lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; 	cp -r ./data ./dataSet&lt;span class=&#34;p&#34;&gt;;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; * &lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	cp ./data/&lt;span class=&#34;nv&#34;&gt;$1&lt;/span&gt;* ./dataSet&lt;span class=&#34;p&#34;&gt;;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;esac&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;注意好格式。&lt;/p&gt;
&lt;h3 id=&#34;未知&#34;&gt;未知
&lt;/h3&gt;&lt;p&gt;很遗憾，在我做完二三问，并发现有测试点依赖后，就全力研究第一问了。没能获得第四、五问的题目。同学们可以参考其它博客。&lt;/p&gt;
&lt;h2 id=&#34;后记&#34;&gt;后记
&lt;/h2&gt;&lt;p&gt;不同于往年，今年的题目难度确实是大。大多数人都extra都喜提0分（或者未提交）  &lt;br&gt;
&lt;img src=&#34;https://demiurge-zby.github.io/p/%E5%8C%97%E8%88%AAos-lab0-%E4%B8%8A%E6%9C%BA/image.png&#34;
	width=&#34;223&#34;
	height=&#34;226&#34;
	srcset=&#34;https://demiurge-zby.github.io/p/%E5%8C%97%E8%88%AAos-lab0-%E4%B8%8A%E6%9C%BA/image_hu1178097306729725857.png 480w, https://demiurge-zby.github.io/p/%E5%8C%97%E8%88%AAos-lab0-%E4%B8%8A%E6%9C%BA/image_hu1454011011673143592.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;0&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;98&#34;
		data-flex-basis=&#34;236px&#34;
	
&gt;   &lt;br&gt;
倘若第一问hint能够正常给出，本次lab的体验感应该还是不错的。&lt;/p&gt;
&lt;p&gt;笔者给extra留了一整个小时还攻不下第一问，可见该hint的重要性（）&lt;/p&gt;
&lt;p&gt;现在想起自己实验报告里写OS多温和什么的，，，&lt;/p&gt;
&lt;p&gt;OS的磨难才刚刚开始。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>北航OS Lab0 预备知识</title>
        <link>https://demiurge-zby.github.io/p/%E5%8C%97%E8%88%AAos-lab0-%E9%A2%84%E5%A4%87%E7%9F%A5%E8%AF%86/</link>
        <pubDate>Thu, 27 Feb 2025 12:15:30 +0800</pubDate>
        
        <guid>https://demiurge-zby.github.io/p/%E5%8C%97%E8%88%AAos-lab0-%E9%A2%84%E5%A4%87%E7%9F%A5%E8%AF%86/</guid>
        <description>&lt;img src="https://demiurge-zby.github.io/p/%E5%8C%97%E8%88%AAos-lab0-%E9%A2%84%E5%A4%87%E7%9F%A5%E8%AF%86/Ark.png" alt="Featured image of post 北航OS Lab0 预备知识" /&gt;&lt;h1 id=&#34;实验报告&#34;&gt;实验报告
&lt;/h1&gt;&lt;h2 id=&#34;思考题&#34;&gt;思考题
&lt;/h2&gt;&lt;h3 id=&#34;thinking-01&#34;&gt;Thinking 0.1
&lt;/h3&gt;&lt;p&gt;文本内容如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://demiurge-zby.github.io/p/%E5%8C%97%E8%88%AAos-lab0-%E9%A2%84%E5%A4%87%E7%9F%A5%E8%AF%86/image.png&#34;
	width=&#34;466&#34;
	height=&#34;565&#34;
	srcset=&#34;https://demiurge-zby.github.io/p/%E5%8C%97%E8%88%AAos-lab0-%E9%A2%84%E5%A4%87%E7%9F%A5%E8%AF%86/image_hu15829322080962621648.png 480w, https://demiurge-zby.github.io/p/%E5%8C%97%E8%88%AAos-lab0-%E9%A2%84%E5%A4%87%E7%9F%A5%E8%AF%86/image_hu11849206786200839682.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;git status&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;82&#34;
		data-flex-basis=&#34;197px&#34;
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;刚刚创建文件后，文件处于未跟踪状态，即&lt;code&gt;Untracked&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;文件被&lt;code&gt;git add&lt;/code&gt;之后，被建立跟踪并且进入&lt;code&gt;Staged&lt;/code&gt;状态。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当文件被&lt;code&gt;git commit&lt;/code&gt;后，进入未修改状态&lt;code&gt;Unmodified&lt;/code&gt;，若增加修改，则变为&lt;code&gt;Modified&lt;/code&gt;状态。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因此结果并不一样。因为第一次add之前，文件尚未被跟踪，文件作出修改也仍会处于&lt;code&gt;Untracked&lt;/code&gt;状态。&lt;/p&gt;
&lt;p&gt;而在add与commit之后，文件被跟踪，提交过后的修改会被记录为&lt;code&gt;Modified&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&#34;thinking-02&#34;&gt;Thinking 0.2
&lt;/h3&gt;&lt;p&gt;&lt;code&gt;add the file&lt;/code&gt;对应&lt;code&gt;git add&lt;/code&gt; （第一次add文件）        &lt;br&gt;
&lt;code&gt;stage the file&lt;/code&gt;对应&lt;code&gt;git add&lt;/code&gt; （已跟踪的文件经过修改后进行的add，添加到暂存区）       &lt;br&gt;
&lt;code&gt;commit&lt;/code&gt;对应&lt;code&gt;git commit&lt;/code&gt; (把暂存区里的内容commit)&lt;/p&gt;
&lt;h3 id=&#34;thinking-03&#34;&gt;Thinking 0.3
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;代码文件print.c被错误删除时，应当使用什么命令将其恢复？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;应当使用&lt;code&gt;git restore print.c&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;print.c仍然在暂存区，只是在工作区被删除，只需将工作区恢复到暂存区状态即可。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;代码文件print.c被错误删除后，执行了&lt;code&gt;git rm print.c&lt;/code&gt;命令，此时应当
使用什么命令将其恢复？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;应当先后使用&lt;code&gt;git reset HEAD print.c&lt;/code&gt;与&lt;code&gt;git restore print.c&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;因为执行了&lt;code&gt;git rm print.c&lt;/code&gt;，暂存区已被改动，所以需要先恢复暂存区的内容。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;无关文件hello.txt已经被添加到暂存区时，如何在不删除此文件的前提下
将其移出暂存区？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;应当使用&lt;code&gt;git rm -cached hello.txt&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;thinking-04&#34;&gt;Thinking 0.4
&lt;/h3&gt;&lt;p&gt;&lt;code&gt;git log&lt;/code&gt;结果如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://demiurge-zby.github.io/p/%E5%8C%97%E8%88%AAos-lab0-%E9%A2%84%E5%A4%87%E7%9F%A5%E8%AF%86/image-1.png&#34;
	width=&#34;530&#34;
	height=&#34;631&#34;
	srcset=&#34;https://demiurge-zby.github.io/p/%E5%8C%97%E8%88%AAos-lab0-%E9%A2%84%E5%A4%87%E7%9F%A5%E8%AF%86/image-1_hu3297354720116851202.png 480w, https://demiurge-zby.github.io/p/%E5%8C%97%E8%88%AAos-lab0-%E9%A2%84%E5%A4%87%E7%9F%A5%E8%AF%86/image-1_hu6840445999607377668.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;git log&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;83&#34;
		data-flex-basis=&#34;201px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;版本回退后&lt;code&gt;git log&lt;/code&gt;结果如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://demiurge-zby.github.io/p/%E5%8C%97%E8%88%AAos-lab0-%E9%A2%84%E5%A4%87%E7%9F%A5%E8%AF%86/image-2.png&#34;
	width=&#34;528&#34;
	height=&#34;547&#34;
	srcset=&#34;https://demiurge-zby.github.io/p/%E5%8C%97%E8%88%AAos-lab0-%E9%A2%84%E5%A4%87%E7%9F%A5%E8%AF%86/image-2_hu2569888871527426734.png 480w, https://demiurge-zby.github.io/p/%E5%8C%97%E8%88%AAos-lab0-%E9%A2%84%E5%A4%87%E7%9F%A5%E8%AF%86/image-2_hu4451645708424704670.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;git log&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;96&#34;
		data-flex-basis=&#34;231px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;版本切换的结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://demiurge-zby.github.io/p/%E5%8C%97%E8%88%AAos-lab0-%E9%A2%84%E5%A4%87%E7%9F%A5%E8%AF%86/image-3.png&#34;
	width=&#34;684&#34;
	height=&#34;440&#34;
	srcset=&#34;https://demiurge-zby.github.io/p/%E5%8C%97%E8%88%AAos-lab0-%E9%A2%84%E5%A4%87%E7%9F%A5%E8%AF%86/image-3_hu2447533878860350817.png 480w, https://demiurge-zby.github.io/p/%E5%8C%97%E8%88%AAos-lab0-%E9%A2%84%E5%A4%87%E7%9F%A5%E8%AF%86/image-3_hu12117117513593335777.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;git log&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;155&#34;
		data-flex-basis=&#34;373px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://demiurge-zby.github.io/p/%E5%8C%97%E8%88%AAos-lab0-%E9%A2%84%E5%A4%87%E7%9F%A5%E8%AF%86/image-4.png&#34;
	width=&#34;744&#34;
	height=&#34;670&#34;
	srcset=&#34;https://demiurge-zby.github.io/p/%E5%8C%97%E8%88%AAos-lab0-%E9%A2%84%E5%A4%87%E7%9F%A5%E8%AF%86/image-4_hu14216853382266145143.png 480w, https://demiurge-zby.github.io/p/%E5%8C%97%E8%88%AAos-lab0-%E9%A2%84%E5%A4%87%E7%9F%A5%E8%AF%86/image-4_hu9645650563847857658.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;git log&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;111&#34;
		data-flex-basis=&#34;266px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;可以看出&lt;code&gt;git reset --hard HEAD^&lt;/code&gt;执行后，&lt;code&gt;git log&lt;/code&gt;结果并不是1-2-3-2，而是直接变为1-2&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git reset --hard &amp;lt;hash&amp;gt;&lt;/code&gt;对于版本的控制也并不改变目录树，而是在原有的目录树上切换结点。&lt;/p&gt;
&lt;h3 id=&#34;thinking-05&#34;&gt;Thinking 0.5
&lt;/h3&gt;&lt;p&gt;运行结果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://demiurge-zby.github.io/p/%E5%8C%97%E8%88%AAos-lab0-%E9%A2%84%E5%A4%87%E7%9F%A5%E8%AF%86/image-5.png&#34;
	width=&#34;501&#34;
	height=&#34;248&#34;
	srcset=&#34;https://demiurge-zby.github.io/p/%E5%8C%97%E8%88%AAos-lab0-%E9%A2%84%E5%A4%87%E7%9F%A5%E8%AF%86/image-5_hu18119050952445327974.png 480w, https://demiurge-zby.github.io/p/%E5%8C%97%E8%88%AAos-lab0-%E9%A2%84%E5%A4%87%E7%9F%A5%E8%AF%86/image-5_hu17127191734205273665.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;&amp;gt; and &#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;202&#34;
		data-flex-basis=&#34;484px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;gt;&lt;/code&gt; 的重定向是覆盖，而&lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;的重定向是追加。&lt;/p&gt;
&lt;h3 id=&#34;thinking-06&#34;&gt;Thinking 0.6
&lt;/h3&gt;&lt;p&gt;command内容为：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://demiurge-zby.github.io/p/%E5%8C%97%E8%88%AAos-lab0-%E9%A2%84%E5%A4%87%E7%9F%A5%E8%AF%86/image-6.png&#34;
	width=&#34;425&#34;
	height=&#34;416&#34;
	srcset=&#34;https://demiurge-zby.github.io/p/%E5%8C%97%E8%88%AAos-lab0-%E9%A2%84%E5%A4%87%E7%9F%A5%E8%AF%86/image-6_hu6965343964014852431.png 480w, https://demiurge-zby.github.io/p/%E5%8C%97%E8%88%AAos-lab0-%E9%A2%84%E5%A4%87%E7%9F%A5%E8%AF%86/image-6_hu7513391156839822228.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Command&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;102&#34;
		data-flex-basis=&#34;245px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;result内容为：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://demiurge-zby.github.io/p/%E5%8C%97%E8%88%AAos-lab0-%E9%A2%84%E5%A4%87%E7%9F%A5%E8%AF%86/image-8.png&#34;
	width=&#34;319&#34;
	height=&#34;288&#34;
	srcset=&#34;https://demiurge-zby.github.io/p/%E5%8C%97%E8%88%AAos-lab0-%E9%A2%84%E5%A4%87%E7%9F%A5%E8%AF%86/image-8_hu13913448634350666254.png 480w, https://demiurge-zby.github.io/p/%E5%8C%97%E8%88%AAos-lab0-%E9%A2%84%E5%A4%87%E7%9F%A5%E8%AF%86/image-8_hu16136104289695794963.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Result&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;110&#34;
		data-flex-basis=&#34;265px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;解释说明：&lt;/p&gt;
&lt;p&gt;为了原样输出test，command每一行的内容为：    &lt;br&gt;
echo &amp;rsquo; &lt;code&gt;Content&lt;/code&gt; &amp;rsquo; &amp;raquo; test (第一行是&amp;gt;)&lt;/p&gt;
&lt;p&gt;其中单引号的目的是保证原样输出，不触发文本中的任何$符号与&amp;gt;符号&lt;/p&gt;
&lt;p&gt;result的内容有两部分，   &lt;br&gt;
一是test运行的输出结果会重定向到result，     &lt;br&gt;
二是test文件本身也有重定向到result的代码&lt;/p&gt;
&lt;p&gt;思考问题：&lt;/p&gt;
&lt;p&gt;若把&lt;code&gt;echo echo Shell Start&lt;/code&gt;的&lt;code&gt;echo Shell Start&lt;/code&gt;用反引号引起来         &lt;br&gt;
则会将反引号内指令的运算结果变为一个字符串&lt;code&gt;&amp;quot;Shell Start&amp;quot;&lt;/code&gt;    &lt;br&gt;
最终整条指令结果为Shell Start&lt;/p&gt;
&lt;p&gt;而&lt;code&gt;echo echo Shell Start&lt;/code&gt;的结果是echo Shell Start&lt;/p&gt;
&lt;p&gt;&lt;code&gt;echo echo $c&amp;gt;file1&lt;/code&gt;则同理，加上反引号后指令会输出3  &lt;br&gt;
而不加反引号应输出echo $c&amp;gt;file1，结果不同。&lt;/p&gt;
&lt;h2 id=&#34;难点分析&#34;&gt;难点分析
&lt;/h2&gt;&lt;p&gt;Lab0作为大家走向OS的过渡课程，其思维难度不高，重难点在于对各种指令的运用。&lt;/p&gt;
&lt;p&gt;如sed awk grep等方法的运用，单引号、双引号与反引号的灵活使用等等&lt;/p&gt;
&lt;h2 id=&#34;实验体会&#34;&gt;实验体会
&lt;/h2&gt;&lt;p&gt;目前尚未进行上机的限时测试，而日常实验的训练，很像我第一次搭建OO评测机时，一点点探索与学习的过程。&lt;/p&gt;
&lt;p&gt;感性的话不必多说，但是to be honest,  &lt;br&gt;
OS的lab0相较于CO的P0-P2以及OO的U1，已然是非常温和了。&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
